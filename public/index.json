[{"authors":null,"categories":null,"content":"Flexibility This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials To remove these pages, delete the courses folder and see below to delete the associated menu link.\nUpdate site menu After renaming or deleting the courses folder, you may wish to update any [[main]] menu links to it by editing your menu configuration at config/_default/menus.toml.\nFor example, if you delete this folder, you can remove the following from your menu configuration:\n[[main]] name = \u0026quot;Courses\u0026quot; url = \u0026quot;courses/\u0026quot; weight = 50  Or, if you are creating a software documentation site, you can rename the courses folder to docs and update the associated Courses menu configuration to:\n[[main]] name = \u0026quot;Docs\u0026quot; url = \u0026quot;docs/\u0026quot; weight = 50  Update the docs menu If you use the docs layout, note that the name of the menu in the front matter should be in the form [menu.X] where X is the folder name. Hence, if you rename the courses/example/ folder, you should also rename the menu definitions in the front matter of files within courses/example/ from [menu.example] to [menu.\u0026lt;NewFolderName\u0026gt;].\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"/courses/example/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"Learn how to use Academic's docs layout for publishing online courses, software documentation, and tutorials.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"74533bae41439377bd30f645c4677a27","permalink":"/courses/example/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example1/","section":"courses","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"1c2b5a11257c768c90d5050637d77d6a","permalink":"/courses/example/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example2/","section":"courses","summary":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":[],"categories":[],"content":"\r\r\rThis is part 2 of a series of posts demonstrating how equivalent analysis can be carried out in SQL and R. Here we look at joins, grouped data, and subqueries.\n\r\rContents\r\rIntroduction\rThe data\r1. Common joins\r\r1.1 Inner join\r1.2 Left join\r1.3 Right join\r1.4 Full join\r\r2. Grouped data\r\r2.1 Summarizing grouped data\r2.2 Filtering grouped data\r\r3. Subqueries\r\r3.1 Subquery in the WHERE clause\r3.2 Subquery in the FROM clause\r3.3 Correlated subqueries\r3.4 Common table expressions\r\r\r\r\rIntroduction\rIn Part 1 of this series we looked at the similarities between SQL and R when selecting, sorting and filtering data. In this second part we are going to extend the comparison to include joins, grouped data and subqueries.\n\r\n\rThe data\rWe will use the same sample dataset from mysqltutorial.org that was used in the first part of this post, as described here. The schema is reproduced below for ease of reference:\r\r\rInstructions on how to load the sample dataset into MySQL and R were provided here.\n(Top)\r\r\r1. Common joins\rA join allows you to combine variables or columns from two tables. It first matches observations by their keys, then copies across variables from one table to another.\nTo understand joins, we are going to use the explanation provided by Hadley Wickham in R for Data Science, and the excellent animations that were produced by Garrick Aden-Buie. These illustrate the different ways that we can join the data in table x, below, with the data in table y. The colored columns represent the “key” variable that is used to match the rows between the tables.\n\r\rThis section looks at four common joins:\n\rInner join\rLeft join\rRight join\rFull join\r\r(Top)\r\r1.1 Inner join\rAn inner join shows all rows from x where there are matching values in y, and all columns from x and y:\n\r\rExample 1.1a:\rSay we want to list the name of every employee from the employees table who has one or more customers recorded in the customers table.\nThis is an example of an inner join, as we only want records that have a match in both tables. In this case our keys - the columns that we will be matching - are the employeeNumber in the employees table and the salesRepEmployeeNumber in the customers table.\nWe would like the code to return the following information:\n\remployee number\remployee first name\remployee second name\rcustomer name(s)\r\rWith SQL:\nTo do this in SQL we would use INNER JOIN, followed by the name of the table we are joining to. We then use ON to specify the names of the columns (keys) that are being used to match the data in the two tables:\nSELECT employees.employeeNumber, employees.lastName, employees.firstName, customers.customerName\rFROM employees INNER JOIN customers ON employees.employeeNumber = customers.salesRepEmployeeNumber\rORDER BY lastName, customerName\rNote that we’ve specified the table from which each column is taken; for example, using employees.employeeNumber rather than just employeeNumber. This is necessary in cases where the same column name appears in more than one table. In this particular example, we could have written the code without the table prefixes, but they have been included for illustrative purposes.\nWith R:\nThe same join could be carried out in R using the inner_join function. This includes the by argument (equivalent to SQL’s ON), in which we list the names of the keys:\nemployees %\u0026gt;% #left-hand table\r#after \u0026#39;by\u0026#39; we list the key from the left-hand table first:\rinner_join(customers, by = c(\u0026quot;employeeNumber\u0026quot; = \u0026quot;salesRepEmployeeNumber\u0026quot;)) %\u0026gt;%\rselect(employeeNumber, lastName, firstName, customerName) %\u0026gt;% arrange(lastName, customerName)\rBoth the SQL and R code above returns the following 100 records. Note that each employee’s name appears more than once if they have more than one customer.\r\r\remployeeNumber\r\rlastName\r\rfirstName\r\rcustomerName\r\r\r\r\r\r1337\r\rBondur\r\rLoui\r\rAuto Canal+ Petit\r\r\r\r1337\r\rBondur\r\rLoui\r\rLa Corne D’abondance, Co. \r\r\r1337\r\rBondur\r\rLoui\r\rLyon Souveniers\r\r\r\r1337\r\rBondur\r\rLoui\r\rMarseille Mini Autos\r\r\r\r1337\r\rBondur\r\rLoui\r\rReims Collectables\r\r\r\r1337\r\rBondur\r\rLoui\r\rSaveley \u0026amp; Henriot, Co. \r\r\r1501\r\rBott\r\rLarry\r\rAV Stores, Co. \r\r\r1501\r\rBott\r\rLarry\r\rDouble Decker Gift Stores, Ltd\r\r\r\r1501\r\rBott\r\rLarry\r\rgiftsbymail.co.uk\r\r\r\r1501\r\rBott\r\rLarry\r\rOulu Toy Supplies, Inc. \r\r\r1501\r\rBott\r\rLarry\r\rStylish Desk Decors, Co. \r\r\r1501\r\rBott\r\rLarry\r\rSuominen Souveniers\r\r\r\r1501\r\rBott\r\rLarry\r\rToys of Finland, Co. \r\r\r1501\r\rBott\r\rLarry\r\rUK Collectables, Ltd. \r\r\r1401\r\rCastillo\r\rPamela\r\rAmica Models \u0026amp; Co. \r\r\r1401\r\rCastillo\r\rPamela\r\rDanish Wholesale Imports\r\r\r\r1401\r\rCastillo\r\rPamela\r\rFrau da Collezione\r\r\r\r1401\r\rCastillo\r\rPamela\r\rHeintze Collectables\r\r\r\r1401\r\rCastillo\r\rPamela\r\rL’ordine Souveniers\r\r\r\r1401\r\rCastillo\r\rPamela\r\rMini Auto Werke\r\r\r\r1401\r\rCastillo\r\rPamela\r\rPetit Auto\r\r\r\r1401\r\rCastillo\r\rPamela\r\rRovelli Gifts\r\r\r\r1401\r\rCastillo\r\rPamela\r\rRoyale Belge\r\r\r\r1401\r\rCastillo\r\rPamela\r\rSalzburg Collectables\r\r\r\r1188\r\rFirrelli\r\rJulie\r\rCambridge Collectables Co. \r\r\r1188\r\rFirrelli\r\rJulie\r\rClassic Gift Ideas, Inc\r\r\r\r1188\r\rFirrelli\r\rJulie\r\rCollectables For Less Inc. \r\r\r1188\r\rFirrelli\r\rJulie\r\rDiecast Collectables\r\r\r\r1188\r\rFirrelli\r\rJulie\r\rMini Creations Ltd. \r\r\r1188\r\rFirrelli\r\rJulie\r\rOnline Mini Collectables\r\r\r\r1611\r\rFixter\r\rAndy\r\rAnna’s Decorations, Ltd\r\r\r\r1611\r\rFixter\r\rAndy\r\rAustralian Collectables, Ltd\r\r\r\r1611\r\rFixter\r\rAndy\r\rAustralian Collectors, Co. \r\r\r1611\r\rFixter\r\rAndy\r\rAustralian Gift Network, Co\r\r\r\r1611\r\rFixter\r\rAndy\r\rSouveniers And Things Co. \r\r\r1702\r\rGerard\r\rMartin\r\rCAF Imports\r\r\r\r1702\r\rGerard\r\rMartin\r\rCorrida Auto Replicas, Ltd\r\r\r\r1702\r\rGerard\r\rMartin\r\rEnaco Distributors\r\r\r\r1702\r\rGerard\r\rMartin\r\rIberia Gift Imports, Corp. \r\r\r1702\r\rGerard\r\rMartin\r\rPrecious Collectables\r\r\r\r1702\r\rGerard\r\rMartin\r\rVida Sport, Ltd\r\r\r\r1370\r\rHernandez\r\rGerard\r\rAlpha Cognac\r\r\r\r1370\r\rHernandez\r\rGerard\r\rAtelier graphique\r\r\r\r1370\r\rHernandez\r\rGerard\r\rAuto Associés \u0026amp; Cie.\r\r\r\r1370\r\rHernandez\r\rGerard\r\rDaedalus Designs Imports\r\r\r\r1370\r\rHernandez\r\rGerard\r\rEuro+ Shopping Channel\r\r\r\r1370\r\rHernandez\r\rGerard\r\rLa Rochelle Gifts\r\r\r\r1370\r\rHernandez\r\rGerard\r\rMini Caravy\r\r\r\r1165\r\rJennings\r\rLeslie\r\rCorporate Gift Ideas Co. \r\r\r1165\r\rJennings\r\rLeslie\r\rMini Gifts Distributors Ltd. \r\r\r1165\r\rJennings\r\rLeslie\r\rMini Wheels Co. \r\r\r1165\r\rJennings\r\rLeslie\r\rSignal Collectibles Ltd. \r\r\r1165\r\rJennings\r\rLeslie\r\rTechnics Stores Inc. \r\r\r1165\r\rJennings\r\rLeslie\r\rThe Sharp Gifts Warehouse\r\r\r\r1504\r\rJones\r\rBarry\r\rBaane Mini Imports\r\r\r\r1504\r\rJones\r\rBarry\r\rBavarian Collectables Imports, Co. \r\r\r1504\r\rJones\r\rBarry\r\rBlauer See Auto, Co. \r\r\r1504\r\rJones\r\rBarry\r\rClover Collections, Co. \r\r\r1504\r\rJones\r\rBarry\r\rHerkku Gifts\r\r\r\r1504\r\rJones\r\rBarry\r\rNorway Gifts By Mail, Co. \r\r\r1504\r\rJones\r\rBarry\r\rScandinavian Gift Ideas\r\r\r\r1504\r\rJones\r\rBarry\r\rToms Spezialitäten, Ltd\r\r\r\r1504\r\rJones\r\rBarry\r\rVolvo Model Replicas, Co\r\r\r\r1612\r\rMarsh\r\rPeter\r\rDown Under Souveniers, Inc\r\r\r\r1612\r\rMarsh\r\rPeter\r\rExtreme Desk Decorations, Ltd\r\r\r\r1612\r\rMarsh\r\rPeter\r\rGiftsForHim.com\r\r\r\r1612\r\rMarsh\r\rPeter\r\rHandji Gifts\u0026amp; Co\r\r\r\r1612\r\rMarsh\r\rPeter\r\rKelly’s Gift Shop\r\r\r\r1621\r\rNishi\r\rMami\r\rCruz \u0026amp; Sons Co. \r\r\r1621\r\rNishi\r\rMami\r\rDragon Souveniers, Ltd. \r\r\r1621\r\rNishi\r\rMami\r\rKing Kong Collectables, Co. \r\r\r1621\r\rNishi\r\rMami\r\rOsaka Souveniers Co. \r\r\r1621\r\rNishi\r\rMami\r\rTokyo Collectables, Ltd\r\r\r\r1216\r\rPatterson\r\rSteve\r\rAuto-Moto Classics Inc. \r\r\r1216\r\rPatterson\r\rSteve\r\rDiecast Classics Inc. \r\r\r1216\r\rPatterson\r\rSteve\r\rFunGiftIdeas.com\r\r\r\r1216\r\rPatterson\r\rSteve\r\rGifts4AllAges.com\r\r\r\r1216\r\rPatterson\r\rSteve\r\rMarta’s Replicas Co. \r\r\r1216\r\rPatterson\r\rSteve\r\rOnline Diecast Creations Co. \r\r\r1166\r\rThompson\r\rLeslie\r\rBoards \u0026amp; Toys Co. \r\r\r1166\r\rThompson\r\rLeslie\r\rCollectable Mini Designs Co. \r\r\r1166\r\rThompson\r\rLeslie\r\rMen ‘R’ US Retailers, Ltd. \r\r\r1166\r\rThompson\r\rLeslie\r\rSignal Gift Stores\r\r\r\r1166\r\rThompson\r\rLeslie\r\rToys4GrownUps.com\r\r\r\r1166\r\rThompson\r\rLeslie\r\rWest Coast Collectables Co. \r\r\r1286\r\rTseng\r\rFoon Yue\r\rAmerican Souvenirs Inc\r\r\r\r1286\r\rTseng\r\rFoon Yue\r\rClassic Legends Inc. \r\r\r1286\r\rTseng\r\rFoon Yue\r\rMicroscale Inc. \r\r\r1286\r\rTseng\r\rFoon Yue\r\rMuscle Machine Inc\r\r\r\r1286\r\rTseng\r\rFoon Yue\r\rQuébec Home Shopping Network\r\r\r\r1286\r\rTseng\r\rFoon Yue\r\rSuper Scale Inc. \r\r\r1286\r\rTseng\r\rFoon Yue\r\rVitachrome Inc. \r\r\r1323\r\rVanauf\r\rGeorge\r\rCanadian Gift Exchange Network\r\r\r\r1323\r\rVanauf\r\rGeorge\r\rGift Depot Inc. \r\r\r1323\r\rVanauf\r\rGeorge\r\rGift Ideas Corp. \r\r\r1323\r\rVanauf\r\rGeorge\r\rLand of Toys Inc. \r\r\r1323\r\rVanauf\r\rGeorge\r\rMini Classics\r\r\r\r1323\r\rVanauf\r\rGeorge\r\rMotor Mint Distributors Inc. \r\r\r1323\r\rVanauf\r\rGeorge\r\rRoyal Canadian Collectables, Ltd. \r\r\r1323\r\rVanauf\r\rGeorge\r\rTekni Collectables Inc. \r\r\r\r\r\rExample 1.1b:\rSay that we wanted to list every customer from the customers table who has one or more orders in the orders table.\nThis is another example of an inner join, this time matching records using the ‘customerNumber’ column as our key, which is the same in both tables.\nWe want the query to return the following information:\n\rcustomer number\rcustomer name\rorder number\rcurrent order status\r\rWith SQL:\nThe fact that the same column name is used in both tables means we can simplify our code with USING instead of ON, as follows:\nSELECT c.customerNumber, c.customerName, o.orderNumber, o.status\rFROM\rcustomers AS c INNER JOIN orders AS o\rUSING (customerNumber)\rORDER BY\rcustomerName\rThis simplifies the code as we only need to list one column after USING.\nIn the example above, we’ve also used aliases in place of the full table names, which further simplifies the code. This has assigned the short name ‘c’ to the ‘customers’ table and ‘o’ to the ‘orders’ table. This is done with the keyword AS, though even this could be excluded. Aliases makes the code shorter and easier to read.\nWith R:\nThe equivalent R code is shown below. Note that we now only need to specify the one column name in the by argument.\ncustomers %\u0026gt;% inner_join(orders, by = \u0026quot;customerNumber\u0026quot;) %\u0026gt;%\rselect(customerNumber, customerName, orderNumber, status) %\u0026gt;% arrange(customerName)\r\nThis code returns 326 rows, the first 50 of which are shown below:\r\r\rcustomerNumber\r\rcustomerName\r\rorderNumber\r\rstatus\r\r\r\r\r\r242\r\rAlpha Cognac\r\r10136\r\rShipped\r\r\r\r242\r\rAlpha Cognac\r\r10178\r\rShipped\r\r\r\r242\r\rAlpha Cognac\r\r10397\r\rShipped\r\r\r\r249\r\rAmica Models \u0026amp; Co. \r10280\r\rShipped\r\r\r\r249\r\rAmica Models \u0026amp; Co. \r10293\r\rShipped\r\r\r\r276\r\rAnna’s Decorations, Ltd\r\r10148\r\rShipped\r\r\r\r276\r\rAnna’s Decorations, Ltd\r\r10169\r\rShipped\r\r\r\r276\r\rAnna’s Decorations, Ltd\r\r10370\r\rShipped\r\r\r\r276\r\rAnna’s Decorations, Ltd\r\r10391\r\rShipped\r\r\r\r103\r\rAtelier graphique\r\r10123\r\rShipped\r\r\r\r103\r\rAtelier graphique\r\r10298\r\rShipped\r\r\r\r103\r\rAtelier graphique\r\r10345\r\rShipped\r\r\r\r471\r\rAustralian Collectables, Ltd\r\r10193\r\rShipped\r\r\r\r471\r\rAustralian Collectables, Ltd\r\r10265\r\rShipped\r\r\r\r471\r\rAustralian Collectables, Ltd\r\r10415\r\rDisputed\r\r\r\r114\r\rAustralian Collectors, Co. \r10120\r\rShipped\r\r\r\r114\r\rAustralian Collectors, Co. \r10125\r\rShipped\r\r\r\r114\r\rAustralian Collectors, Co. \r10223\r\rShipped\r\r\r\r114\r\rAustralian Collectors, Co. \r10342\r\rShipped\r\r\r\r114\r\rAustralian Collectors, Co. \r10347\r\rShipped\r\r\r\r333\r\rAustralian Gift Network, Co\r\r10152\r\rShipped\r\r\r\r333\r\rAustralian Gift Network, Co\r\r10174\r\rShipped\r\r\r\r333\r\rAustralian Gift Network, Co\r\r10374\r\rShipped\r\r\r\r198\r\rAuto-Moto Classics Inc. \r10130\r\rShipped\r\r\r\r198\r\rAuto-Moto Classics Inc. \r10290\r\rShipped\r\r\r\r198\r\rAuto-Moto Classics Inc. \r10352\r\rShipped\r\r\r\r256\r\rAuto Associés \u0026amp; Cie.\r\r10216\r\rShipped\r\r\r\r256\r\rAuto Associés \u0026amp; Cie.\r\r10304\r\rShipped\r\r\r\r406\r\rAuto Canal+ Petit\r\r10211\r\rShipped\r\r\r\r406\r\rAuto Canal+ Petit\r\r10252\r\rShipped\r\r\r\r406\r\rAuto Canal+ Petit\r\r10402\r\rShipped\r\r\r\r187\r\rAV Stores, Co. \r10110\r\rShipped\r\r\r\r187\r\rAV Stores, Co. \r10306\r\rShipped\r\r\r\r187\r\rAV Stores, Co. \r10332\r\rShipped\r\r\r\r121\r\rBaane Mini Imports\r\r10103\r\rShipped\r\r\r\r121\r\rBaane Mini Imports\r\r10158\r\rShipped\r\r\r\r121\r\rBaane Mini Imports\r\r10309\r\rShipped\r\r\r\r121\r\rBaane Mini Imports\r\r10325\r\rShipped\r\r\r\r415\r\rBavarian Collectables Imports, Co. \r10296\r\rShipped\r\r\r\r128\r\rBlauer See Auto, Co. \r10101\r\rShipped\r\r\r\r128\r\rBlauer See Auto, Co. \r10230\r\rShipped\r\r\r\r128\r\rBlauer See Auto, Co. \r10300\r\rShipped\r\r\r\r128\r\rBlauer See Auto, Co. \r10323\r\rShipped\r\r\r\r219\r\rBoards \u0026amp; Toys Co. \r10154\r\rShipped\r\r\r\r219\r\rBoards \u0026amp; Toys Co. \r10376\r\rShipped\r\r\r\r344\r\rCAF Imports\r\r10177\r\rShipped\r\r\r\r344\r\rCAF Imports\r\r10231\r\rShipped\r\r\r\r173\r\rCambridge Collectables Co. \r10228\r\rShipped\r\r\r\r173\r\rCambridge Collectables Co. \r10249\r\rShipped\r\r\r\r202\r\rCanadian Gift Exchange Network\r\r10206\r\rShipped\r\r\r\r\r\r(Top)\r\r\r\r1.2 Left join\rA left join (or outer left join) returns all rows from x, and all columns from x and y. Rows in x with no match in y will have NA or NULL values in the new columns.\n\r\rExample 1.2:\rIn the example above we wanted to see the names customers in the customers table who had a corresponding order in the orders table. But what if we wanted to see names of all customers and their order information, even if they don’t have any orders?\nThis is an example of a left join. We can do this using LEFT JOIN in SQL and left_join in R, as follows:\nWith SQL:\nSELECT c.customerNumber, c.customerName, o.orderNumber, o.status\rFROM customers AS c\rLEFT JOIN orders AS o\rON c.customerNumber = o.customerNumber\rORDER BY customerName\rWith R:\ncustomers %\u0026gt;% left_join(orders, by = \u0026quot;customerNumber\u0026quot;) %\u0026gt;% select(customerNumber, customerName, orderNumber, status) %\u0026gt;% arrange(customerName)\rThis returns 350 records, the first 50 of which are shown in the table below. If you scroll down, you will see that some customers have ‘NA’ for orderNumber and status (this will appear as ‘NULL’ in MySQL). These are customers who had no corresponding orders in the orders table. Note that each customer will appear more than once if they have more than one order.\n\r\rcustomerNumber\r\rcustomerName\r\rorderNumber\r\rstatus\r\r\r\r\r\r242\r\rAlpha Cognac\r\r10136\r\rShipped\r\r\r\r242\r\rAlpha Cognac\r\r10178\r\rShipped\r\r\r\r242\r\rAlpha Cognac\r\r10397\r\rShipped\r\r\r\r168\r\rAmerican Souvenirs Inc\r\rNA\r\rNA\r\r\r\r249\r\rAmica Models \u0026amp; Co. \r10280\r\rShipped\r\r\r\r249\r\rAmica Models \u0026amp; Co. \r10293\r\rShipped\r\r\r\r237\r\rANG Resellers\r\rNA\r\rNA\r\r\r\r276\r\rAnna’s Decorations, Ltd\r\r10148\r\rShipped\r\r\r\r276\r\rAnna’s Decorations, Ltd\r\r10169\r\rShipped\r\r\r\r276\r\rAnna’s Decorations, Ltd\r\r10370\r\rShipped\r\r\r\r276\r\rAnna’s Decorations, Ltd\r\r10391\r\rShipped\r\r\r\r465\r\rAnton Designs, Ltd. \rNA\r\rNA\r\r\r\r206\r\rAsian Shopping Network, Co\r\rNA\r\rNA\r\r\r\r348\r\rAsian Treasures, Inc. \rNA\r\rNA\r\r\r\r103\r\rAtelier graphique\r\r10123\r\rShipped\r\r\r\r103\r\rAtelier graphique\r\r10298\r\rShipped\r\r\r\r103\r\rAtelier graphique\r\r10345\r\rShipped\r\r\r\r471\r\rAustralian Collectables, Ltd\r\r10193\r\rShipped\r\r\r\r471\r\rAustralian Collectables, Ltd\r\r10265\r\rShipped\r\r\r\r471\r\rAustralian Collectables, Ltd\r\r10415\r\rDisputed\r\r\r\r114\r\rAustralian Collectors, Co. \r10120\r\rShipped\r\r\r\r114\r\rAustralian Collectors, Co. \r10125\r\rShipped\r\r\r\r114\r\rAustralian Collectors, Co. \r10223\r\rShipped\r\r\r\r114\r\rAustralian Collectors, Co. \r10342\r\rShipped\r\r\r\r114\r\rAustralian Collectors, Co. \r10347\r\rShipped\r\r\r\r333\r\rAustralian Gift Network, Co\r\r10152\r\rShipped\r\r\r\r333\r\rAustralian Gift Network, Co\r\r10174\r\rShipped\r\r\r\r333\r\rAustralian Gift Network, Co\r\r10374\r\rShipped\r\r\r\r198\r\rAuto-Moto Classics Inc. \r10130\r\rShipped\r\r\r\r198\r\rAuto-Moto Classics Inc. \r10290\r\rShipped\r\r\r\r198\r\rAuto-Moto Classics Inc. \r10352\r\rShipped\r\r\r\r256\r\rAuto Associés \u0026amp; Cie.\r\r10216\r\rShipped\r\r\r\r256\r\rAuto Associés \u0026amp; Cie.\r\r10304\r\rShipped\r\r\r\r406\r\rAuto Canal+ Petit\r\r10211\r\rShipped\r\r\r\r406\r\rAuto Canal+ Petit\r\r10252\r\rShipped\r\r\r\r406\r\rAuto Canal+ Petit\r\r10402\r\rShipped\r\r\r\r187\r\rAV Stores, Co. \r10110\r\rShipped\r\r\r\r187\r\rAV Stores, Co. \r10306\r\rShipped\r\r\r\r187\r\rAV Stores, Co. \r10332\r\rShipped\r\r\r\r121\r\rBaane Mini Imports\r\r10103\r\rShipped\r\r\r\r121\r\rBaane Mini Imports\r\r10158\r\rShipped\r\r\r\r121\r\rBaane Mini Imports\r\r10309\r\rShipped\r\r\r\r121\r\rBaane Mini Imports\r\r10325\r\rShipped\r\r\r\r415\r\rBavarian Collectables Imports, Co. \r10296\r\rShipped\r\r\r\r293\r\rBG\u0026amp;E Collectables\r\rNA\r\rNA\r\r\r\r128\r\rBlauer See Auto, Co. \r10101\r\rShipped\r\r\r\r128\r\rBlauer See Auto, Co. \r10230\r\rShipped\r\r\r\r128\r\rBlauer See Auto, Co. \r10300\r\rShipped\r\r\r\r128\r\rBlauer See Auto, Co. \r10323\r\rShipped\r\r\r\r219\r\rBoards \u0026amp; Toys Co. \r10154\r\rShipped\r\r\r\r\r\r(Top)\r\r\r\r1.3 Right join\rA right join (or outer right join) returns all rows from y, and all columns from x and y. Rows in y with no match in x will have NA or NULL values in the new columns.\n\r\rThis is exactly the same as a left join, described in the section above, but this time we’re returning all rows from the right-hand table (in this case, y) rather than those from the left-hand table.\nA right join in which y is designated as the right-hand table (as in the animation above) would give exactly the same result as a left join in which y was designated as the left-hand table. The choice of whether a table is designated on the left or the right is entirely arbitrary.\nRight joins can be carried out using RIGHT JOIN in SQL and right_join in R. No example is provided here given the similarity to left joins.\n(Top)\r\r\r1.4 Full join\rA full join (or full outer join) returns all rows and all columns from both x and y. Where there is no match for a particular key value, the missing values will appear as NA or NULL.\n\n\r\rFull joins are not actually supported in MySQL. However, a full join is equivalent to a combination of a left join and right join, as described above. To combine the results of these two joins, we need to use union.\nUnion returns all unique rows from tables x and y as follows:\n\r\rExample 1.4:\rSay we want to list the name of every employee from the employees table, and every customer from the customers table. Where possible, we want to match the name of each employee to his/her customers. However we also want to return the names of all employees without customers, and the names of all customers without an associated employee. This is an example of a full join.\nAssume that we want our query to return:\n\reach employee’s last name\reach employee’s first name\reach customer’s name\r\rWith SQL:\nTo simulate a full join in SQL, we are going to use a LEFT JOIN, a RIGHT JOIN and the UNION of the two, as follows:\nSELECT e.lastName, e.firstName, c.customerName FROM employees AS e\rLEFT JOIN customers AS c ON e.employeeNumber = c.salesRepEmployeeNumber\rUNION\rSELECT e.lastName, e.firstName, c.customerName FROM employees AS e\rRIGHT JOIN customers AS c ON e.employeeNumber = c.salesRepEmployeeNumber\rWith R:\nIn R, the syntax is much simpler as we can use full_join:\nemployees %\u0026gt;% full_join(customers, by = c(\u0026#39;employeeNumber\u0026#39; = \u0026#39;salesRepEmployeeNumber\u0026#39;)) %\u0026gt;% select(lastName, firstName, customerName)\rThe two sets of code above return the following 130 records. As expected, this shows the name of each employee matched to their customer(s), where such a match exists, but also the names of each employee and customer even if there is no match:\n\r\rlastName\r\rfirstName\r\rcustomerName\r\r\r\r\r\rMurphy\r\rDiane\r\rNA\r\r\r\rPatterson\r\rMary\r\rNA\r\r\r\rFirrelli\r\rJeff\r\rNA\r\r\r\rPatterson\r\rWilliam\r\rNA\r\r\r\rBondur\r\rGerard\r\rNA\r\r\r\rBow\r\rAnthony\r\rNA\r\r\r\rJennings\r\rLeslie\r\rMini Gifts Distributors Ltd. \r\r\rJennings\r\rLeslie\r\rMini Wheels Co. \r\r\rJennings\r\rLeslie\r\rTechnics Stores Inc. \r\r\rJennings\r\rLeslie\r\rCorporate Gift Ideas Co. \r\r\rJennings\r\rLeslie\r\rThe Sharp Gifts Warehouse\r\r\r\rJennings\r\rLeslie\r\rSignal Collectibles Ltd. \r\r\rThompson\r\rLeslie\r\rSignal Gift Stores\r\r\r\rThompson\r\rLeslie\r\rToys4GrownUps.com\r\r\r\rThompson\r\rLeslie\r\rBoards \u0026amp; Toys Co. \r\r\rThompson\r\rLeslie\r\rCollectable Mini Designs Co. \r\r\rThompson\r\rLeslie\r\rMen ‘R’ US Retailers, Ltd. \r\r\rThompson\r\rLeslie\r\rWest Coast Collectables Co. \r\r\rFirrelli\r\rJulie\r\rCambridge Collectables Co. \r\r\rFirrelli\r\rJulie\r\rOnline Mini Collectables\r\r\r\rFirrelli\r\rJulie\r\rMini Creations Ltd. \r\r\rFirrelli\r\rJulie\r\rClassic Gift Ideas, Inc\r\r\r\rFirrelli\r\rJulie\r\rCollectables For Less Inc. \r\r\rFirrelli\r\rJulie\r\rDiecast Collectables\r\r\r\rPatterson\r\rSteve\r\rDiecast Classics Inc. \r\r\rPatterson\r\rSteve\r\rAuto-Moto Classics Inc. \r\r\rPatterson\r\rSteve\r\rMarta’s Replicas Co. \r\r\rPatterson\r\rSteve\r\rGifts4AllAges.com\r\r\r\rPatterson\r\rSteve\r\rOnline Diecast Creations Co. \r\r\rPatterson\r\rSteve\r\rFunGiftIdeas.com\r\r\r\rTseng\r\rFoon Yue\r\rMuscle Machine Inc\r\r\r\rTseng\r\rFoon Yue\r\rAmerican Souvenirs Inc\r\r\r\rTseng\r\rFoon Yue\r\rVitachrome Inc. \r\r\rTseng\r\rFoon Yue\r\rQuébec Home Shopping Network\r\r\r\rTseng\r\rFoon Yue\r\rClassic Legends Inc. \r\r\rTseng\r\rFoon Yue\r\rSuper Scale Inc. \r\r\rTseng\r\rFoon Yue\r\rMicroscale Inc. \r\r\rVanauf\r\rGeorge\r\rLand of Toys Inc. \r\r\rVanauf\r\rGeorge\r\rGift Depot Inc. \r\r\rVanauf\r\rGeorge\r\rCanadian Gift Exchange Network\r\r\r\rVanauf\r\rGeorge\r\rRoyal Canadian Collectables, Ltd. \r\r\rVanauf\r\rGeorge\r\rMini Classics\r\r\r\rVanauf\r\rGeorge\r\rTekni Collectables Inc. \r\r\rVanauf\r\rGeorge\r\rGift Ideas Corp. \r\r\rVanauf\r\rGeorge\r\rMotor Mint Distributors Inc. \r\r\rBondur\r\rLoui\r\rSaveley \u0026amp; Henriot, Co. \r\r\rBondur\r\rLoui\r\rLa Corne D’abondance, Co. \r\r\rBondur\r\rLoui\r\rLyon Souveniers\r\r\r\rBondur\r\rLoui\r\rMarseille Mini Autos\r\r\r\rBondur\r\rLoui\r\rReims Collectables\r\r\r\rBondur\r\rLoui\r\rAuto Canal+ Petit\r\r\r\rHernandez\r\rGerard\r\rAtelier graphique\r\r\r\rHernandez\r\rGerard\r\rLa Rochelle Gifts\r\r\r\rHernandez\r\rGerard\r\rEuro+ Shopping Channel\r\r\r\rHernandez\r\rGerard\r\rDaedalus Designs Imports\r\r\r\rHernandez\r\rGerard\r\rMini Caravy\r\r\r\rHernandez\r\rGerard\r\rAlpha Cognac\r\r\r\rHernandez\r\rGerard\r\rAuto Associés \u0026amp; Cie.\r\r\r\rCastillo\r\rPamela\r\rDanish Wholesale Imports\r\r\r\rCastillo\r\rPamela\r\rHeintze Collectables\r\r\r\rCastillo\r\rPamela\r\rAmica Models \u0026amp; Co. \r\r\rCastillo\r\rPamela\r\rRovelli Gifts\r\r\r\rCastillo\r\rPamela\r\rPetit Auto\r\r\r\rCastillo\r\rPamela\r\rRoyale Belge\r\r\r\rCastillo\r\rPamela\r\rSalzburg Collectables\r\r\r\rCastillo\r\rPamela\r\rL’ordine Souveniers\r\r\r\rCastillo\r\rPamela\r\rMini Auto Werke\r\r\r\rCastillo\r\rPamela\r\rFrau da Collezione\r\r\r\rBott\r\rLarry\r\rToys of Finland, Co. \r\r\rBott\r\rLarry\r\rAV Stores, Co. \r\r\rBott\r\rLarry\r\rUK Collectables, Ltd. \r\r\rBott\r\rLarry\r\rgiftsbymail.co.uk\r\r\r\rBott\r\rLarry\r\rOulu Toy Supplies, Inc. \r\r\rBott\r\rLarry\r\rStylish Desk Decors, Co. \r\r\rBott\r\rLarry\r\rSuominen Souveniers\r\r\r\rBott\r\rLarry\r\rDouble Decker Gift Stores, Ltd\r\r\r\rJones\r\rBarry\r\rBaane Mini Imports\r\r\r\rJones\r\rBarry\r\rBlauer See Auto, Co. \r\r\rJones\r\rBarry\r\rVolvo Model Replicas, Co\r\r\r\rJones\r\rBarry\r\rHerkku Gifts\r\r\r\rJones\r\rBarry\r\rClover Collections, Co. \r\r\rJones\r\rBarry\r\rToms Spezialitäten, Ltd\r\r\r\rJones\r\rBarry\r\rNorway Gifts By Mail, Co. \r\r\rJones\r\rBarry\r\rBavarian Collectables Imports, Co. \r\r\rJones\r\rBarry\r\rScandinavian Gift Ideas\r\r\r\rFixter\r\rAndy\r\rAustralian Collectors, Co. \r\r\rFixter\r\rAndy\r\rAnna’s Decorations, Ltd\r\r\r\rFixter\r\rAndy\r\rSouveniers And Things Co. \r\r\rFixter\r\rAndy\r\rAustralian Gift Network, Co\r\r\r\rFixter\r\rAndy\r\rAustralian Collectables, Ltd\r\r\r\rMarsh\r\rPeter\r\rHandji Gifts\u0026amp; Co\r\r\r\rMarsh\r\rPeter\r\rDown Under Souveniers, Inc\r\r\r\rMarsh\r\rPeter\r\rGiftsForHim.com\r\r\r\rMarsh\r\rPeter\r\rExtreme Desk Decorations, Ltd\r\r\r\rMarsh\r\rPeter\r\rKelly’s Gift Shop\r\r\r\rKing\r\rTom\r\rNA\r\r\r\rNishi\r\rMami\r\rDragon Souveniers, Ltd. \r\r\rNishi\r\rMami\r\rOsaka Souveniers Co. \r\r\rNishi\r\rMami\r\rKing Kong Collectables, Co. \r\r\rNishi\r\rMami\r\rCruz \u0026amp; Sons Co. \r\r\rNishi\r\rMami\r\rTokyo Collectables, Ltd\r\r\r\rKato\r\rYoshimi\r\rNA\r\r\r\rGerard\r\rMartin\r\rEnaco Distributors\r\r\r\rGerard\r\rMartin\r\rVida Sport, Ltd\r\r\r\rGerard\r\rMartin\r\rCAF Imports\r\r\r\rGerard\r\rMartin\r\rPrecious Collectables\r\r\r\rGerard\r\rMartin\r\rCorrida Auto Replicas, Ltd\r\r\r\rGerard\r\rMartin\r\rIberia Gift Imports, Corp. \r\r\rNA\r\rNA\r\rHavel \u0026amp; Zbyszek Co\r\r\r\rNA\r\rNA\r\rPorto Imports Co. \r\r\rNA\r\rNA\r\rAsian Shopping Network, Co\r\r\r\rNA\r\rNA\r\rNatürlich Autos\r\r\r\rNA\r\rNA\r\rANG Resellers\r\r\r\rNA\r\rNA\r\rMessner Shopping Network\r\r\r\rNA\r\rNA\r\rFranken Gifts, Co\r\r\r\rNA\r\rNA\r\rBG\u0026amp;E Collectables\r\r\r\rNA\r\rNA\r\rSchuyler Imports\r\r\r\rNA\r\rNA\r\rDer Hund Imports\r\r\r\rNA\r\rNA\r\rCramer Spezialitäten, Ltd\r\r\r\rNA\r\rNA\r\rAsian Treasures, Inc. \r\r\rNA\r\rNA\r\rSAR Distributors, Co\r\r\r\rNA\r\rNA\r\rKommission Auto\r\r\r\rNA\r\rNA\r\rLisboa Souveniers, Inc\r\r\r\rNA\r\rNA\r\rStuttgart Collectable Exchange\r\r\r\rNA\r\rNA\r\rFeuer Online Stores, Inc\r\r\r\rNA\r\rNA\r\rWarburg Exchange\r\r\r\rNA\r\rNA\r\rAnton Designs, Ltd. \r\r\rNA\r\rNA\r\rMit Vergnügen \u0026amp; Co. \r\r\rNA\r\rNA\r\rKremlin Collectables, Co. \r\r\rNA\r\rNA\r\rRaanan Stores, Inc\r\r\r\r\r\r(Top)\r\r\r\r\r2. Grouped data\rIn SQL and R, it is possible to group a set of rows into a summary row. This summary row can include an aggregate measure of each group; for example, the sum, the average, or the count of records in each group.\nIt is also possible to filter the data based on these aggregates. For example, you could filter to only show rows from groups with more than 20 records, or only show rows from groups where the average value of a certain variable was greater than 100.\n\r2.1 Summarizing grouped data\rGrouped data is often summarized using aggregate functions such as SUM, AVG, MAX, MIN and COUNT. Here we look at a couple of examples using our sample database.\nExample A\rSay we want to find the total value (in $) of each order in our sample data set.\nTo do this, we need to (1) calculate the value of each product in every order, i.e. the quantity times the price; and (2) group each product sold by its order number and add these values together.\nWith SQL:\nIn SQL we group the data using the GROUP BY clause, and specify our aggregate calculation in the SELECT clause, as follows:\nSELECT orderNumber,\rSUM(quantityOrdered * priceEach) AS value\rFROM orderdetails\rGROUP BY orderNumber\rWith R:\nIn R, we would use group_by() to group the data, and summarize() to apply the aggregate function to each group:\norderdetails %\u0026gt;% group_by(orderNumber) %\u0026gt;% summarize(value = sum(quantityOrdered * priceEach)) %\u0026gt;% select(orderNumber, value)\rThe first 10 records (out of 326) are shown in the table below:\n## `summarise()` ungrouping output (override with `.groups` argument)\r\r\rorderNumber\r\rvalue\r\r\r\r\r\r10100\r\r10223.83\r\r\r\r10101\r\r10549.01\r\r\r\r10102\r\r5494.78\r\r\r\r10103\r\r50218.95\r\r\r\r10104\r\r40206.20\r\r\r\r10105\r\r53959.21\r\r\r\r10106\r\r52151.81\r\r\r\r10107\r\r22292.62\r\r\r\r10108\r\r51001.22\r\r\r\r10109\r\r25833.14\r\r\r\r\r\rExample B\rWe can also group using an expression rather than values that already exist in a column.\nFor example, say we wanted to find the total value of orders in each year, where the order has been shipped.\nTo do this, we need to do a combination of the following:\n\rJoin the orders table, which has the date of each order, with the orderdetails table, which contains information on the quantity and price of the products ordered\rUse the YEAR() function in SQL, and year() in R (using the lubridate package), which the returns the year corresponding to each order date. This is will be used to group the data\rFilter the data to only include orders whose status is ‘shipped’.\r\rThis can be done in the following code:\nWith SQL:\nSELECT YEAR(orderDate) AS year,\rSUM(quantityOrdered * priceEach) AS value\rFROM\rorders\rINNER JOIN\rorderdetails USING (orderNumber)\rWHERE\rstatus = \u0026#39;Shipped\u0026#39;\rGROUP BY YEAR(orderDate)\rWith R:\norders %\u0026gt;% inner_join(orderdetails, by = \u0026#39;orderNumber\u0026#39;) %\u0026gt;%\rfilter(status == \u0026#39;Shipped\u0026#39;) %\u0026gt;% group_by(year = lubridate::year(orderDate)) %\u0026gt;%\rsummarize(value = sum(quantityOrdered * priceEach))\rWhich gives the total value of shipped orders for the three years:\n## `summarise()` ungrouping output (override with `.groups` argument)\r\r\ryear\r\rvalue\r\r\r\r\r\r2003\r\r3223096\r\r\r\r2004\r\r4300603\r\r\r\r2005\r\r1341396\r\r\r\r\r(Top)\r\r\r\r2.2 Filtering grouped data\rIn SQL and R we can specify filter conditions for a group of rows. This assumes that we have already grouped our data using GROUP BY in SQL or group_by() in R.\nWhen filtering grouped data in SQL we use the HAVING clause. Note that we do not use the WHERE clause, which is only used to filter ungrouped data.\nIn R, we filter our grouped data using filter(), which was also used with ungrouped data.\nExample A\rSay we want to show all order numbers in which more than 650 individual items were ordered. This requires us to group by order number (orderNumber) from the orderdetails table, and to filter the results based on the total quantity of products in each order.\nWith SQL:\nIn SQL we apply our filter using the HAVING clause, as follows:\nSELECT orderNumber, sum(quantityOrdered) as quantity\rFROM\rorderdetails\rGROUP BY orderNumber\rHAVING sum(quantityOrdered) \u0026gt; 650\rORDER BY quantity DESC\rWith R:\nWith R, we use the filter() function:\norderdetails %\u0026gt;% group_by(orderNumber) %\u0026gt;% summarize(quantity = sum(quantityOrdered)) %\u0026gt;% filter(quantity \u0026gt; 650) %\u0026gt;% arrange(desc(quantity)) \rThis gives the following three orders with more than 650 items:\n## `summarise()` ungrouping output (override with `.groups` argument)\r\r\rorderNumber\r\rquantity\r\r\r\r\r\r10222\r\r717\r\r\r\r10106\r\r675\r\r\r\r10165\r\r670\r\r\r\r\r\rExample B\rAssume we want to find customers with an average order value over $3,800, for orders that have been shipped.\nThis example is slightly more complex as we need to join three tables, as follows:\nWith SQL:\nSELECT a.customerName,\rb.status,\ravg(c.quantityOrdered * c.priceEach) as avg_value\rFROM\rcustomers a\rINNER JOIN\rorders b USING (customerNumber)\rINNER JOIN\rorderdetails c USING (orderNumber)\rGROUP BY customerName, status\rHAVING avg_value \u0026gt; 3800 AND status = \u0026#39;Shipped\u0026#39;\rORDER BY avg_value DESC\rNote that in MySQL we can use the alias for average value (avg_value) in the HAVING clause, which was defined in the SELECT clause. Apparently not all versions of SQL support the use of aliases in the HAVING clause.\nWith R:\ncustomers %\u0026gt;% left_join(orders, by = \u0026#39;customerNumber\u0026#39;) %\u0026gt;% left_join(orderdetails, by = \u0026#39;orderNumber\u0026#39;) %\u0026gt;% group_by(customerName, status) %\u0026gt;% summarize(avg_value = mean(quantityOrdered * priceEach)) %\u0026gt;% filter(avg_value \u0026gt; 3800 \u0026amp; status == \u0026#39;Shipped\u0026#39;) %\u0026gt;% arrange(desc(avg_value))\rWe find that the following five customers have average shipped order sizes that are over $3,800:\n## `summarise()` regrouping output by \u0026#39;customerName\u0026#39; (override with `.groups` argument)\r\r\rcustomerName\r\rstatus\r\ravg_value\r\r\r\r\r\rTekni Collectables Inc. \rShipped\r\r4253.501\r\r\r\rSuper Scale Inc. \rShipped\r\r4139.921\r\r\r\rUK Collectables, Ltd. \rShipped\r\r4077.812\r\r\r\rMini Caravy\r\rShipped\r\r3992.596\r\r\r\rGift Depot Inc. \rShipped\r\r3816.985\r\r\r\r\r(Top)\r\r\r\r\r3. Subqueries\rIn SQL, a subquery is where one query (the ‘inner query’) nested within another query (the ‘outer query’). The result of the inner query is used as part of the outer query.\nThis concept is illustrated in the two examples below: one in which a subquery is used in the WHERE clause, and one in which it is used in the FROM clause.\n(Top)\r\r3.1 Subquery in the WHERE clause\rIn this example, we use a subquery find customers whose payments are greater than the average payment.\nWith SQL:\nSELECT customerNumber, checkNumber, amount\rFROM\rpayments\rWHERE\ramount \u0026gt; (SELECT AVG(amount)\rFROM payments)\rWith R:\nThe equivalent code in R is as follows:\npayments %\u0026gt;% filter(amount \u0026gt; mean(amount))\rWhich gives 134 customers, the first five of which are shown below:\n\r\rcustomerNumber\r\rcheckNumber\r\rpaymentDate\r\ramount\r\r\r\r\r\r112\r\rHQ55022\r\r2003-06-06\r\r32641.98\r\r\r\r112\r\rND748579\r\r2004-08-20\r\r33347.88\r\r\r\r114\r\rGG31455\r\r2003-05-20\r\r45864.03\r\r\r\r114\r\rMA765515\r\r2004-12-15\r\r82261.22\r\r\r\r114\r\rNR27552\r\r2004-03-10\r\r44894.74\r\r\r\r\r(Top)\r\r\r3.2 Subquery in the FROM clause (derived tables)\rWe can also use subqueries in the FROM clause. This creates what’s known as a ‘derived table’ - a virtual table which is only stored for the duration of the query.\nIn this example we want to find the maximum, minimum and average number of items in an order. To do this we create a subquery / derived table which shows the count of different items that were included in each order.\nWith SQL:\nIn MySQL we use a subquery to create the derived table called ‘itemcount’. This counts the number of items in each order (‘items’). Note that in MySQL derived tables must always be given an alias.\nSELECT\rselect max(items), min(items), floor(avg(items))\rFROM( SELECT orderNumber, count(orderNumber) as items\rFROM orderdetails\rGROUP BY orderNumber) as itemcount\rWith R:\norderdetails %\u0026gt;% # This is equivalent to the inner query\rgroup_by(orderNumber) %\u0026gt;% summarise(items = n()) %\u0026gt;% # This is equivalent to the outer query\rsummarise(\rmax = max(items),\rmin = min(items),\ravg = floor(mean(items))\r)\rThis shows that the maximum number of different items in an single order was 18, the minimum was 1, and the average was 9 (rounded).\n(Top)\r\r\r3.3 Correlated subqueries\rIn the previous two examples the subqueries were independent. This means the the inner query did not depend on the outer query, and could have been run as a standalone query.\nA correlated subquery is one that uses data from the outer query. In other words, the inner query depends on the outer query. A correlated subquery is evaluated once for each row in the outer query.\nFor example: say we want to select products with a buy price that is greater than the average buy price for its product line.\nWith SQL:\nSELECT productname, buyprice\rFROM products as p1\rWHERE buyprice \u0026gt;\r(SELECT avg(buyprice)\rFROM products\rWHERE productLine = p1.productLine)\rHere the inner query is finding the average buy price corresponding to the product line listed in each row of the outer query, and only selecting rows where the product price exceeds this average.\nWith R:\nThe same result can be achieved in R using a helper column called ‘avgBuyPrice’ which, for each row, shows the average price for the associated product line. The data is then filter to only show products whose price is higher than this average:\nproducts %\u0026gt;%\r# This is equivalent to the inner query\r# Creates a column with the avg price of the relevant product line\rgroup_by(productLine) %\u0026gt;% mutate(avgBuyPrice = mean(buyPrice)) %\u0026gt;% ungroup() %\u0026gt;%\r# This is equivalent to the outer query\rfilter(buyPrice \u0026gt; avgBuyPrice) %\u0026gt;% select(productName, buyPrice)\rThis code returns 55 rows, the first five of which are shown below:\n\r\rproductName\r\rbuyPrice\r\r\r\r\r\r1952 Alpine Renault 1300\r\r98.58\r\r\r\r1996 Moto Guzzi 1100i\r\r68.99\r\r\r\r2003 Harley-Davidson Eagle Drag Bike\r\r91.02\r\r\r\r1972 Alfa Romeo GTA\r\r85.68\r\r\r\r1962 LanciaA Delta 16V\r\r103.42\r\r\r\r\r(Top)\r\r\r3.4 Common table expressions\rA common table expression (CTE), like a derived table, is a named temporary table that exists only for the duration of a query. It is created using the WITH clause.\nUnlike a derived table, a CTE can be referenced multiple times in the same query. In addition, a CTE provides better readability and performance in comparison with a derived table.\nAs a simple illustration, we can repeat the example above (see section 3.2) where we found the maximum, minimum and average number of items in an order. This time, instead of using a subquery, the inner query can be expressed as a common table expression called ‘itemcount’\nWith SQL:\nThis time we create the temporary table called ‘itemcount’ using the WITH clause. We then select the relevant information from this CTE:\nWITH itemcount AS (\rSELECT orderNumber, count(orderNumber) as items\rFROM orderdetails\rGROUP BY orderNumber)\rSELECT max(items), min(items), floor(avg(items))\rFROM itemcount\rWith R:\nIn R, we create a separate dataframe which is analogous to the CTE above:\n# This is equivalent to the CTE table\ritemcount \u0026lt;- orderdetails %\u0026gt;% group_by(orderNumber) %\u0026gt;% summarise(items = n())\r# This is the code which makes use of the CTE\ritemcount %\u0026gt;%\rsummarize(\rmax = max(items), min = min(items), avg = floor(mean(items))\r)\rHere we get the same results as above:\n\r\rmax\r\rmin\r\ravg\r\r\r\r\r\r18\r\r1\r\r9\r\r\r\r\r(Top)\r\r\r\r","date":1573603200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573603200,"objectID":"a6514c5d19779a79fb64145993b4c80c","permalink":"/post/r-and-sql-b/","publishdate":"2019-11-13T00:00:00Z","relpermalink":"/post/r-and-sql-b/","section":"post","summary":"Part 2 of a series that looks at parallels between SQL and R. Here we look at joins, grouped data and subqueries.","tags":[],"title":"R and SQL (Part 2)","type":"post"},{"authors":[],"categories":[],"content":"\r\r\rWhen analyzing data, many common procedures in SQL can also be performed in R, and vice versa. Here I demonstrate the similarities between the two. For people with a basic knowledge of either R or SQL, this may make the process of learning the other language more intuitive.\n\r\r In Part 1 of this series we look at the similarities between SQL and R when selecting, sorting and filtering data. In Part 2 we move on to look at joins, grouped data and subqueries.   Contents\r\rIntroduction\rThe sample dataset\rSetting up\r1. Selecting data\r\r1.1 Select all columns\r1.2 Select specific columns\r1.3 Select distinct records\r1.4 Select distinct records with multiple columns\r1.5 Create new columns\r\r2. Sorting and ordering data\r\r2.1 Basic sorting\r2.2 Sort descending\n\r2.3 Limiting the number of results\n\r\r3. Filtering\r\r3.1 Basic filtering\r3.2 Filtering based on inequalities\r3.3 Filtering with AND conditions\r3.4 Filtering with OR conditions\n\r3.5 Filtering with both OR, AND conditions\n\r3.6 The IN operator\n\r3.7 The NOT IN operator\r3.8 Filtering with regular expressions\r\r\r\r\rIntroduction\rSQL is a language that allows users query, manipulate, and transform data. Many common queries carried out with SQL, such as filtering and joining tables, can be carried out using equivalent functions in R.\nIn this post, I wanted to draw some comparisons between two languages. I illustrate this using a sample database, first running queries using SQL, and then demonstrating how identical results could be achieved in R.\nThe purpose of this post is not to suggest that R is a substitute for SQL, but to examine how the two approaches can achieve the same results when working with data. For people who have a basic knowledge of either R or SQL, this may make the process of learning the other language more intuitive.\nWhen working with R, I will be using the dplyr package. This is a data manipulation package that includes simple verbs (e.g. ‘select’ and ‘filter’), as well as joins (e.g. ‘left_join’ and ‘inner_join’), that can replicate many common queries carried out in SQL.\r\r\n\rThe sample dataset\rWe will be using a fictional database called classicmodels from the MySQL Tutorial website. I will also use a number of examples provided in their tutorials, which is useful for comparing and validating our results.\nThe sample database is for a fictional company that sells model planes, cars and so on. It comprises the follow tables:\n\rcustomers: customer details including name and address\rproducts: a list of models, their description, vendor, quantity in stock and prices\rproductlines: includes the product line (e.g. ‘motorcycles’) and a description\rorders: sales orders placed by customers, including the date and current status\rorderdetails: details of each order, including products, quantities and prices\rpayments: payments made by each customer, including the date and the amount\remployees: employees’ names, titles, offices, contact details, and supervisor\roffices: address and contact details of each office\r\rThis is shown in the following schema:\n\r\r(Top)\n\r\rSetting up\rRunning the queries in SQL\rThere are least two ways you can perform SQL queries on this sample database:\nType queries straight into the browser using the TryIt tool provided at mysqltutorial.org; or\n\rLoad the sample database into MySQL or another database management system. Instructions on how to install MySQL can be found here. Instructions on how to load in the sample database can be found here (just substitute the SQL file referred to the video with the one being used in this exercise). The SQL file for the ‘classicmodel’ database can be downloaded from mysqltutorial.org.\n\r\r\rRunning the code in R\rWe will be looking at equivalent R code using the dplyr package. This includes the use of the pipe operator, %\u0026gt;%, which allows you to chain code together in a series of logical steps. We can load the dplyr package as part of the tidyverse package:\nlibrary(tidyverse)\rWhen running the code in R, we will create a data frame that corresponds to each table in the relational database. These tables can be downloaded as individual .csv files here. Load the data into R using the following code:\n# Enter the file path to where the files are saved on your system\rfilepath \u0026lt;- \u0026#39;tables/\u0026#39; # Read in the tables\rcustomers \u0026lt;- read_csv(paste0(filepath,\u0026#39;customers.csv\u0026#39;), na = \u0026quot;NULL\u0026quot;)\remployees \u0026lt;- read_csv(paste0(filepath,\u0026#39;employees.csv\u0026#39;), na = \u0026quot;NULL\u0026quot;)\roffices \u0026lt;- read_csv(paste0(filepath,\u0026#39;offices.csv\u0026#39;), na = \u0026quot;NULL\u0026quot;)\rorderdetails \u0026lt;- read_csv(paste0(filepath,\u0026#39;orderdetails.csv\u0026#39;), na = \u0026quot;NULL\u0026quot;)\rorders \u0026lt;- read_csv(paste0(filepath,\u0026#39;orders.csv\u0026#39;), na = \u0026quot;NULL\u0026quot;)\rpayments \u0026lt;- read_csv(paste0(filepath,\u0026#39;payments.csv\u0026#39;), na = \u0026quot;NULL\u0026quot;)\rproductlines \u0026lt;- read_csv(paste0(filepath,\u0026#39;productlines.csv\u0026#39;), na = \u0026quot;NULL\u0026quot;)\rproducts \u0026lt;- read_csv(paste0(filepath,\u0026#39;products.csv\u0026#39;), # prevent the model scale (e.g. 1:10) from being read as a date:\rcol_types = cols (productScale = col_character()), na = \u0026quot;NULL\u0026quot;)\rNow we’re ready to start running SQL queries and the equivalent code in R!\n(Top)\n\r\r\r1. Selecting data\r1.1 Select all columns\rThe most simple select statement is one that returns all the information from a table.\nWith SQL:\nTo get data from a table in SQL we use the SELECT statement, to list the columns we are interested in, and FROM, to specify the table. If we want all records from a table, we use SELECT *. For example, to see all the records on the employees table we would use:\nSELECT * FROM employees\rWith R:\nTo get the same results in R, we simply enter the name of table, as follows:\nemployees\rThis gives us the names and details of the 23 employees in the database:\n\r\remployeeNumber\r\rlastName\r\rfirstName\r\rextension\r\remail\r\rofficeCode\r\rreportsTo\r\rjobTitle\r\r\r\r\r\r1002\r\rMurphy\r\rDiane\r\rx5800\r\rdmurphy@classicmodelcars.com\r\r1\r\rNA\r\rPresident\r\r\r\r1056\r\rPatterson\r\rMary\r\rx4611\r\rmpatterso@classicmodelcars.com\r\r1\r\r1002\r\rVP Sales\r\r\r\r1076\r\rFirrelli\r\rJeff\r\rx9273\r\rjfirrelli@classicmodelcars.com\r\r1\r\r1002\r\rVP Marketing\r\r\r\r1088\r\rPatterson\r\rWilliam\r\rx4871\r\rwpatterson@classicmodelcars.com\r\r6\r\r1056\r\rSales Manager (APAC)\r\r\r\r1102\r\rBondur\r\rGerard\r\rx5408\r\rgbondur@classicmodelcars.com\r\r4\r\r1056\r\rSale Manager (EMEA)\r\r\r\r1143\r\rBow\r\rAnthony\r\rx5428\r\rabow@classicmodelcars.com\r\r1\r\r1056\r\rSales Manager (NA)\r\r\r\r1165\r\rJennings\r\rLeslie\r\rx3291\r\rljennings@classicmodelcars.com\r\r1\r\r1143\r\rSales Rep\r\r\r\r1166\r\rThompson\r\rLeslie\r\rx4065\r\rlthompson@classicmodelcars.com\r\r1\r\r1143\r\rSales Rep\r\r\r\r1188\r\rFirrelli\r\rJulie\r\rx2173\r\rjfirrelli@classicmodelcars.com\r\r2\r\r1143\r\rSales Rep\r\r\r\r1216\r\rPatterson\r\rSteve\r\rx4334\r\rspatterson@classicmodelcars.com\r\r2\r\r1143\r\rSales Rep\r\r\r\r1286\r\rTseng\r\rFoon Yue\r\rx2248\r\rftseng@classicmodelcars.com\r\r3\r\r1143\r\rSales Rep\r\r\r\r1323\r\rVanauf\r\rGeorge\r\rx4102\r\rgvanauf@classicmodelcars.com\r\r3\r\r1143\r\rSales Rep\r\r\r\r1337\r\rBondur\r\rLoui\r\rx6493\r\rlbondur@classicmodelcars.com\r\r4\r\r1102\r\rSales Rep\r\r\r\r1370\r\rHernandez\r\rGerard\r\rx2028\r\rghernande@classicmodelcars.com\r\r4\r\r1102\r\rSales Rep\r\r\r\r1401\r\rCastillo\r\rPamela\r\rx2759\r\rpcastillo@classicmodelcars.com\r\r4\r\r1102\r\rSales Rep\r\r\r\r1501\r\rBott\r\rLarry\r\rx2311\r\rlbott@classicmodelcars.com\r\r7\r\r1102\r\rSales Rep\r\r\r\r1504\r\rJones\r\rBarry\r\rx102\r\rbjones@classicmodelcars.com\r\r7\r\r1102\r\rSales Rep\r\r\r\r1611\r\rFixter\r\rAndy\r\rx101\r\rafixter@classicmodelcars.com\r\r6\r\r1088\r\rSales Rep\r\r\r\r1612\r\rMarsh\r\rPeter\r\rx102\r\rpmarsh@classicmodelcars.com\r\r6\r\r1088\r\rSales Rep\r\r\r\r1619\r\rKing\r\rTom\r\rx103\r\rtking@classicmodelcars.com\r\r6\r\r1088\r\rSales Rep\r\r\r\r1621\r\rNishi\r\rMami\r\rx101\r\rmnishi@classicmodelcars.com\r\r5\r\r1056\r\rSales Rep\r\r\r\r1625\r\rKato\r\rYoshimi\r\rx102\r\rykato@classicmodelcars.com\r\r5\r\r1621\r\rSales Rep\r\r\r\r1702\r\rGerard\r\rMartin\r\rx2312\r\rmgerard@classicmodelcars.com\r\r4\r\r1102\r\rSales Rep\r\r\r\r\r\r(Top)\n\r\r1.2 Select specific columns\rWhat if you only want a subset of columns from a given table, such as employees’ first and last names?\nWith SQL:\nIn SQL you just list the column of interest in the SELECT clause as follows:\nSELECT firstName, lastName FROM employees\rWith R:\nThe equivalent R code uses the select() function:\nemployees %\u0026gt;% select(firstName, lastName)\rNote for those learning R, it might be helpful to read the %\u0026gt;% operator as “and then”.\n(Top)\n\r\r1.3 Select distinct records\rSay we want a list of distinct countries in which we have customers, i.e. without returning the same country name twice.\nWith SQL:\nIn SQL we would use SELECT DISTINCT clause, as follows:\nSELECT DISTINCT country FROM customers\r\rWith R:\nIn R, we get the same result using the distinct() function:\ncustomers %\u0026gt;% distinct(country) \rBoth approaches yield a list of 23 unique countries where the company has customers:\r\r\rcountry\r\r\r\r\r\rFrance\r\r\r\rUSA\r\r\r\rAustralia\r\r\r\rNorway\r\r\r\rPoland\r\r\r\rGermany\r\r\r\rSpain\r\r\r\rSweden\r\r\r\rDenmark\r\r\r\rSingapore\r\r\r\rPortugal\r\r\r\rJapan\r\r\r\rFinland\r\r\r\rUK\r\r\r\rIreland\r\r\r\rCanada\r\r\r\rHong Kong\r\r\r\rItaly\r\r\r\rSwitzerland\r\r\r\rNetherlands\r\r\r\rBelgium\r\r\r\rNew Zealand\r\r\r\rSouth Africa\r\r\r\rAustria\r\r\r\rPhilippines\r\r\r\rRussia\r\r\r\rIsrael\r\r\r\r\r\r\r(Top)\r\r\r1.4 Select distinct records with multiple columns\rA similar approach can be used when you want to see distinct combinations of two or more variables / columns.\nFor instance, say you want a list of all US cities in which the company has customers. We can’t simply look at distinct city names, as there can be more than one city with the same name: for example, in our database we have a ‘Glendale’ in California and a ‘Glendale’ in Connecticut.\nTo address this we specify both city and state in our query, as follows (I’m jumping forward here and also adding a WHERE clause, to restrict our results to cities in the USA):\nWith SQL:\nSELECT DISTINCT city,state FROM customers\rWHERE country = \u0026#39;USA\u0026#39; \rWith R:\nThe equivalent R code uses filter() instead of SQL’s WHERE, as will be discussed later:\ncustomers %\u0026gt;% filter(country == \u0026#39;USA\u0026#39;) %\u0026gt;% # ignore this for now!\rdistinct(city, state) \rBoth approaches return 24 rows containing distinct combinations of cities and states.\n\r\rcity\r\rstate\r\r\r\r\r\rLas Vegas\r\rNV\r\r\r\rSan Rafael\r\rCA\r\r\r\rSan Francisco\r\rCA\r\r\r\rNYC\r\rNY\r\r\r\rAllentown\r\rPA\r\r\r\rBurlingame\r\rCA\r\r\r\rNew Haven\r\rCT\r\r\r\rCambridge\r\rMA\r\r\r\rBridgewater\r\rCT\r\r\r\rBrickhaven\r\rMA\r\r\r\rPasadena\r\rCA\r\r\r\rGlendale\r\rCA\r\r\r\rSan Diego\r\rCA\r\r\r\rWhite Plains\r\rNY\r\r\r\rNew Bedford\r\rMA\r\r\r\rNewark\r\rNJ\r\r\r\rPhiladelphia\r\rPA\r\r\r\rLos Angeles\r\rCA\r\r\r\rBoston\r\rMA\r\r\r\rNashua\r\rNH\r\r\r\rGlendale\r\rCT\r\r\r\rSan Jose\r\rCA\r\r\r\rBurbank\r\rCA\r\r\r\rBrisbane\r\rCA\r\r\r\r\r\r\r(Top)\r\r\r1.5 Create new columns\rWhat if we want to create a new column, using the information contained in existing columns?\nFor example: The orderdetails table contains information on which products were included in each order (productCode), the quantity of each product (quantityOrdered) and the price per unit (priceEach). We could use this information to calculate the value of each product that was ordered.\nWith SQL:\nIn SQL, within the SELECT clause, we can calculate our new column and as assign it a name (‘alias’) using the AS keyword, as follows:\nSELECT orderNumber, productCode,\rquantityOrdered * priceEach AS value\rFROM orderdetails\rWith R:\nIn R we would acheive the same results using the mutate function to create our new column:\norderdetails %\u0026gt;% mutate(value = quantityOrdered * priceEach) %\u0026gt;% select(orderNumber, productCode, value)\rThe two sets of code return 2,996 records that show the value of each product in every order. The first 20 rows are displayed in the table below:\n\r\rorderNumber\r\rproductCode\r\rvalue\r\r\r\r\r\r10100\r\rS18_1749\r\r4080.00\r\r\r\r10100\r\rS18_2248\r\r2754.50\r\r\r\r10100\r\rS18_4409\r\r1660.12\r\r\r\r10100\r\rS24_3969\r\r1729.21\r\r\r\r10101\r\rS18_2325\r\r2701.50\r\r\r\r10101\r\rS18_2795\r\r4343.56\r\r\r\r10101\r\rS24_1937\r\r1463.85\r\r\r\r10101\r\rS24_2022\r\r2040.10\r\r\r\r10102\r\rS18_1342\r\r3726.45\r\r\r\r10102\r\rS18_1367\r\r1768.33\r\r\r\r10103\r\rS10_1949\r\r5571.80\r\r\r\r10103\r\rS10_4962\r\r5026.14\r\r\r\r10103\r\rS12_1666\r\r3284.28\r\r\r\r10103\r\rS18_1097\r\r3307.50\r\r\r\r10103\r\rS18_2432\r\r1283.48\r\r\r\r10103\r\rS18_2949\r\r2489.13\r\r\r\r10103\r\rS18_2957\r\r2164.40\r\r\r\r10103\r\rS18_3136\r\r2173.00\r\r\r\r10103\r\rS18_3320\r\r3970.26\r\r\r\r10103\r\rS18_4600\r\r3530.52\r\r\r\r\r\r\r(Top)\r\r\r\r2. Sorting and ordering data\r2.1 Basic sorting\rData can be sorted using the ORDER BY clause in SQL and the arrange() function in R. For example, say you wanted to sort customer locations in the USA alphabetically, first by state and then by city:\nWith SQL:\nSELECT DISTINCT state, city FROM customers\rWHERE country = \u0026#39;USA\u0026#39;\rORDER BY state, city\rWith R:\ncustomers %\u0026gt;% filter(country == \u0026#39;USA\u0026#39;) %\u0026gt;% distinct(state, city) %\u0026gt;% arrange(state, city)\rBoth of which give the following:\r\r\rcity\r\rstate\r\r\r\r\r\rBrisbane\r\rCA\r\r\r\rBurbank\r\rCA\r\r\r\rBurlingame\r\rCA\r\r\r\rGlendale\r\rCA\r\r\r\rLos Angeles\r\rCA\r\r\r\rPasadena\r\rCA\r\r\r\rSan Diego\r\rCA\r\r\r\rSan Francisco\r\rCA\r\r\r\rSan Jose\r\rCA\r\r\r\rSan Rafael\r\rCA\r\r\r\rBridgewater\r\rCT\r\r\r\rGlendale\r\rCT\r\r\r\rNew Haven\r\rCT\r\r\r\rBoston\r\rMA\r\r\r\rBrickhaven\r\rMA\r\r\r\rCambridge\r\rMA\r\r\r\rNew Bedford\r\rMA\r\r\r\rNashua\r\rNH\r\r\r\rNewark\r\rNJ\r\r\r\rLas Vegas\r\rNV\r\r\r\rNYC\r\rNY\r\r\r\rWhite Plains\r\rNY\r\r\r\rAllentown\r\rPA\r\r\r\rPhiladelphia\r\rPA\r\r\r\r\r\r\r(Top)\n\r\r2.2 Sort descending\rWhat if you wanted to list states in reverse alphabetical order, while listing cities in alphabetical order?\nWith SQL:\nIn SQL, you can use ORDER BY .... DESC. Any columns listed before the DESC clause will be listed in descending order.\nSELECT DISTINCT state, city FROM customers\rWHERE country = \u0026#39;USA\u0026#39;\rORDER BY state DESC, city\rWith R:\nEquivalently, in R, you can use arrange(desc()), where the parentheses include the name of the column(s) you want listed in descending order:\ncustomers %\u0026gt;% filter(country == \u0026#39;USA\u0026#39;) %\u0026gt;% distinct(state, city) %\u0026gt;% arrange(desc(state), city) \r\r\rcity\r\rstate\r\r\r\r\r\rAllentown\r\rPA\r\r\r\rPhiladelphia\r\rPA\r\r\r\rNYC\r\rNY\r\r\r\rWhite Plains\r\rNY\r\r\r\rLas Vegas\r\rNV\r\r\r\rNewark\r\rNJ\r\r\r\rNashua\r\rNH\r\r\r\rBoston\r\rMA\r\r\r\rBrickhaven\r\rMA\r\r\r\rCambridge\r\rMA\r\r\r\rNew Bedford\r\rMA\r\r\r\rBridgewater\r\rCT\r\r\r\rGlendale\r\rCT\r\r\r\rNew Haven\r\rCT\r\r\r\rBrisbane\r\rCA\r\r\r\rBurbank\r\rCA\r\r\r\rBurlingame\r\rCA\r\r\r\rGlendale\r\rCA\r\r\r\rLos Angeles\r\rCA\r\r\r\rPasadena\r\rCA\r\r\r\rSan Diego\r\rCA\r\r\r\rSan Francisco\r\rCA\r\r\r\rSan Jose\r\rCA\r\r\r\rSan Rafael\r\rCA\r\r\r\r\r\r\r(Top)\n\r\r2.3 Limiting the number of results\rTo limit the number of results that are shown, you can use SQL’s LIMIT clause and R’s slice() function. These can be combined with ordered data to return the top or bottom results from a table.\nFor example, if you wanted to return the five customers with the highest credit limits you could use the following:\nWith SQL:\nSELECT customerName, creditLimit FROM customers\rORDER BY creditLimit DESC\rLIMIT 5\rWith R:\ncustomers %\u0026gt;% select(customerName, creditLimit) %\u0026gt;% arrange(desc(creditLimit)) %\u0026gt;% slice(1:5)\rWhich give the following:\r\r\rcustomerName\r\rcreditLimit\r\r\r\r\r\rEuro+ Shopping Channel\r\r227600\r\r\r\rMini Gifts Distributors Ltd. \r210500\r\r\r\rVida Sport, Ltd\r\r141300\r\r\r\rMuscle Machine Inc\r\r138500\r\r\r\rAV Stores, Co. \r136800\r\r\r\r\rAnother option in R would be to use the top_n() function, as described here.\n(Top)\n\r\r\r3. Filtering\r3.1 Basic filtering\rFiltering is used to restrict our results to records / rows that satisfy one or more criteria. We already saw some basic filtering in the above, in which we used SQL’s WHERE clause and R’s filter() to only shows cities that were within the United States.\nAnother example would be to find the names of each employee whose job title is ‘Sales Rep’:\nWith SQL:\nSELECT lastName, firstName, jobTitle\rFROM employees\rWHERE jobTitle = \u0026#39;Sales Rep\u0026#39;\rWith R:\nemployees %\u0026gt;% filter(jobTitle == \u0026#39;Sales Rep\u0026#39;) %\u0026gt;% select(firstName,lastName,jobTitle)\rBoth sets of code return the names of the 17 sales reps:\n\r\rfirstName\r\rlastName\r\rjobTitle\r\r\r\r\r\rLeslie\r\rJennings\r\rSales Rep\r\r\r\rLeslie\r\rThompson\r\rSales Rep\r\r\r\rJulie\r\rFirrelli\r\rSales Rep\r\r\r\rSteve\r\rPatterson\r\rSales Rep\r\r\r\rFoon Yue\r\rTseng\r\rSales Rep\r\r\r\rGeorge\r\rVanauf\r\rSales Rep\r\r\r\rLoui\r\rBondur\r\rSales Rep\r\r\r\rGerard\r\rHernandez\r\rSales Rep\r\r\r\rPamela\r\rCastillo\r\rSales Rep\r\r\r\rLarry\r\rBott\r\rSales Rep\r\r\r\rBarry\r\rJones\r\rSales Rep\r\r\r\rAndy\r\rFixter\r\rSales Rep\r\r\r\rPeter\r\rMarsh\r\rSales Rep\r\r\r\rTom\r\rKing\r\rSales Rep\r\r\r\rMami\r\rNishi\r\rSales Rep\r\r\r\rYoshimi\r\rKato\r\rSales Rep\r\r\r\rMartin\r\rGerard\r\rSales Rep\r\r\r\r\r\r\rThere are a couple of differences to note between SQL and R:\n\rR uses == instead of = when filtering\rIn R, it is often necessary to use filter() before select(). This would be the case if the column you are filtering on (in this case ‘jobTitle’) was not also included in the select() function below. In SQL, this order is not an issue\rIn R, the filter condition is case sensitive, but in SQL it is not\n(Top)\r\r\r\r3.2 Filtering based on inequalities\rWe can use the ‘not equal to’ operator != to filter records that do not match a certain criteria.\nFor example, to see the names of the six employees who are not sales reps:\nWith SQL:\nSELECT lastName, firstName, jobTitle\rFROM employees\rWHERE jobTitle != \u0026#39;Sales Rep\u0026#39;\rMySQL would also accept \u0026lt;\u0026gt; as the operator in this case.\nWith R:\nemployees %\u0026gt;% filter(jobTitle != \u0026#39;Sales Rep\u0026#39;) %\u0026gt;% select(lastName, firstName, jobTitle)\rIf you are dealing with numeric data, you can also filter using the operators \u0026gt;, \u0026gt;=, \u0026lt; and \u0026lt;=, which are the same in both languages.\n(Top)\n\r\r3.3 Filtering with AND conditions\rSometime we want to select rows where multiple criteria all hold true. This can be done using AND operator in SQL, and the \u0026amp; operator in R.\nFor example, if we wanted to see the names of customers who are located in California and who have a credit limit over $100,000:\nWith SQL:\nSELECT customername, state, creditlimit FROM customers WHERE state = \u0026#39;CA\u0026#39; AND creditlimit \u0026gt; 100000\rWith R:\ncustomers %\u0026gt;% filter(state == \u0026#39;CA\u0026#39; \u0026amp; creditLimit \u0026gt; 100000) %\u0026gt;% select(customerName, state, creditLimit)\rThese sets of code return the three customers who are both located in California and have credit limits over $100,000:\n\r\rcustomerName\r\rstate\r\rcreditLimit\r\r\r\r\r\rMini Gifts Distributors Ltd. \rCA\r\r210500\r\r\r\rCollectable Mini Designs Co. \rCA\r\r105000\r\r\r\rCorporate Gift Ideas Co. \rCA\r\r105000\r\r\r\r\r(Top)\n\r\r3.4 Filtering with OR conditions\rThe OR condition returns rows where any of our criteria are satisfied. In SQL we use the OR operator, while in R the | symbol is used.\nFor example, say we want to see a list of all customers who are located in the US or France:\nWith SQL:\nSELECT customerName, country\rFROM customers\rWHERE country = \u0026#39;USA\u0026#39; OR country = \u0026#39;FRANCE\u0026#39;\rWith R:\ncustomers %\u0026gt;% filter (country == \u0026#39;USA\u0026#39; | country == \u0026#39;France\u0026#39;) %\u0026gt;% select(customerName, country)\rThis gives us the 48 customers who are located in either USA or France:\n\r\rcustomerName\r\rcountry\r\r\r\r\r\rAtelier graphique\r\rFrance\r\r\r\rSignal Gift Stores\r\rUSA\r\r\r\rLa Rochelle Gifts\r\rFrance\r\r\r\rMini Gifts Distributors Ltd. \rUSA\r\r\r\rMini Wheels Co. \rUSA\r\r\r\rLand of Toys Inc. \rUSA\r\r\r\rSaveley \u0026amp; Henriot, Co. \rFrance\r\r\r\rMuscle Machine Inc\r\rUSA\r\r\r\rDiecast Classics Inc. \rUSA\r\r\r\rTechnics Stores Inc. \rUSA\r\r\r\rAmerican Souvenirs Inc\r\rUSA\r\r\r\rDaedalus Designs Imports\r\rFrance\r\r\r\rLa Corne D’abondance, Co. \rFrance\r\r\r\rCambridge Collectables Co. \rUSA\r\r\r\rGift Depot Inc. \rUSA\r\r\r\rVitachrome Inc. \rUSA\r\r\r\rAuto-Moto Classics Inc. \rUSA\r\r\r\rOnline Mini Collectables\r\rUSA\r\r\r\rToys4GrownUps.com\r\rUSA\r\r\r\rMini Caravy\r\rFrance\r\r\r\rBoards \u0026amp; Toys Co. \rUSA\r\r\r\rCollectable Mini Designs Co. \rUSA\r\r\r\rAlpha Cognac\r\rFrance\r\r\r\rLyon Souveniers\r\rFrance\r\r\r\rAuto Associés \u0026amp; Cie.\r\rFrance\r\r\r\rMarta’s Replicas Co. \rUSA\r\r\r\rMini Classics\r\rUSA\r\r\r\rMini Creations Ltd. \rUSA\r\r\r\rCorporate Gift Ideas Co. \rUSA\r\r\r\rTekni Collectables Inc. \rUSA\r\r\r\rClassic Gift Ideas, Inc\r\rUSA\r\r\r\rMen ‘R’ US Retailers, Ltd. \rUSA\r\r\r\rMarseille Mini Autos\r\rFrance\r\r\r\rReims Collectables\r\rFrance\r\r\r\rGifts4AllAges.com\r\rUSA\r\r\r\rOnline Diecast Creations Co. \rUSA\r\r\r\rCollectables For Less Inc. \rUSA\r\r\r\rAuto Canal+ Petit\r\rFrance\r\r\r\rClassic Legends Inc. \rUSA\r\r\r\rGift Ideas Corp. \rUSA\r\r\r\rThe Sharp Gifts Warehouse\r\rUSA\r\r\r\rSuper Scale Inc. \rUSA\r\r\r\rMicroscale Inc. \rUSA\r\r\r\rFunGiftIdeas.com\r\rUSA\r\r\r\rWest Coast Collectables Co. \rUSA\r\r\r\rMotor Mint Distributors Inc. \rUSA\r\r\r\rSignal Collectibles Ltd. \rUSA\r\r\r\rDiecast Collectables\r\rUSA\r\r\r\r\r\r\r(Top)\n\r\r3.5 Filtering with both OR, AND conditions\rThe examples above can be extended to combine the OR and AND conditions.\nFor example, if you wanted a list of customers with a credit limit of over $100,000 who are located in either the USA or France:\nWith SQL:\nSELECT customerName, country, creditLimit\rFROM customers\rWHERE (country = \u0026#39;USA\u0026#39; OR country = \u0026#39;FRANCE\u0026#39;) AND creditLimit \u0026gt; 100000\rWith R:\ncustomers %\u0026gt;% filter(\r(country == \u0026#39;USA\u0026#39; | country == \u0026#39;France\u0026#39;) \u0026amp; creditLimit \u0026gt; 100000\r) %\u0026gt;% select(customerName, country, creditLimit)\rThe code above returns the 11 customers who are located in the USA or France, and who have credit limits over $100,000.\n\r\rcustomerName\r\rcountry\r\rcreditLimit\r\r\r\r\r\rLa Rochelle Gifts\r\rFrance\r\r118200\r\r\r\rMini Gifts Distributors Ltd. \rUSA\r\r210500\r\r\r\rLand of Toys Inc. \rUSA\r\r114900\r\r\r\rSaveley \u0026amp; Henriot, Co. \rFrance\r\r123900\r\r\r\rMuscle Machine Inc\r\rUSA\r\r138500\r\r\r\rDiecast Classics Inc. \rUSA\r\r100600\r\r\r\rCollectable Mini Designs Co. \rUSA\r\r105000\r\r\r\rMarta’s Replicas Co. \rUSA\r\r123700\r\r\r\rMini Classics\r\rUSA\r\r102700\r\r\r\rCorporate Gift Ideas Co. \rUSA\r\r105000\r\r\r\rOnline Diecast Creations Co. \rUSA\r\r114200\r\r\r\r\r\r\rBy default both SQL and R evaluate the AND operator before the OR operator. This is why it was necessary to put the OR condition in parentheses above, to tell SQL/R to evaluate it first.\nIf we hadn’t used parentheses, the code would have returned the list of customers who either (a) were located in the USA, or (b) were located in France and had a credit limit greater than $100,000. This would have returned the following 38 customers:\n\r\rcustomerName\r\rcountry\r\rcreditLimit\r\r\r\r\r\rSignal Gift Stores\r\rUSA\r\r71800\r\r\r\rLa Rochelle Gifts\r\rFrance\r\r118200\r\r\r\rMini Gifts Distributors Ltd. \rUSA\r\r210500\r\r\r\rMini Wheels Co. \rUSA\r\r64600\r\r\r\rLand of Toys Inc. \rUSA\r\r114900\r\r\r\rSaveley \u0026amp; Henriot, Co. \rFrance\r\r123900\r\r\r\rMuscle Machine Inc\r\rUSA\r\r138500\r\r\r\rDiecast Classics Inc. \rUSA\r\r100600\r\r\r\rTechnics Stores Inc. \rUSA\r\r84600\r\r\r\rAmerican Souvenirs Inc\r\rUSA\r\r0\r\r\r\rCambridge Collectables Co. \rUSA\r\r43400\r\r\r\rGift Depot Inc. \rUSA\r\r84300\r\r\r\rVitachrome Inc. \rUSA\r\r76400\r\r\r\rAuto-Moto Classics Inc. \rUSA\r\r23000\r\r\r\rOnline Mini Collectables\r\rUSA\r\r68700\r\r\r\rToys4GrownUps.com\r\rUSA\r\r90700\r\r\r\rBoards \u0026amp; Toys Co. \rUSA\r\r11000\r\r\r\rCollectable Mini Designs Co. \rUSA\r\r105000\r\r\r\rMarta’s Replicas Co. \rUSA\r\r123700\r\r\r\rMini Classics\r\rUSA\r\r102700\r\r\r\rMini Creations Ltd. \rUSA\r\r94500\r\r\r\rCorporate Gift Ideas Co. \rUSA\r\r105000\r\r\r\rTekni Collectables Inc. \rUSA\r\r43000\r\r\r\rClassic Gift Ideas, Inc\r\rUSA\r\r81100\r\r\r\rMen ‘R’ US Retailers, Ltd. \rUSA\r\r57700\r\r\r\rGifts4AllAges.com\r\rUSA\r\r41900\r\r\r\rOnline Diecast Creations Co. \rUSA\r\r114200\r\r\r\rCollectables For Less Inc. \rUSA\r\r70700\r\r\r\rClassic Legends Inc. \rUSA\r\r67500\r\r\r\rGift Ideas Corp. \rUSA\r\r49700\r\r\r\rThe Sharp Gifts Warehouse\r\rUSA\r\r77600\r\r\r\rSuper Scale Inc. \rUSA\r\r95400\r\r\r\rMicroscale Inc. \rUSA\r\r39800\r\r\r\rFunGiftIdeas.com\r\rUSA\r\r85800\r\r\r\rWest Coast Collectables Co. \rUSA\r\r55400\r\r\r\rMotor Mint Distributors Inc. \rUSA\r\r72600\r\r\r\rSignal Collectibles Ltd. \rUSA\r\r60300\r\r\r\rDiecast Collectables\r\rUSA\r\r85100\r\r\r\r\r\r\r(Top)\n\r\r3.6 The IN operator\rIn SQL, the IN clause is used select records where a value matches any value in a list or a subquery (we’ll look at subqueries later). The equivalent operator in R is %in%.\nWhen used on a list, the IN clause acts just like one or more OR conditions.\rFor example, say we want a list of customers located in either France, USA or Australia:\nWith SQL:\nSELECT customerName, country\rFROM customers\rWHERE country IN (\u0026#39;France\u0026#39;, \u0026#39;USA\u0026#39;, \u0026#39;Australia\u0026#39;)\rWith R:\nWith R, we need to combine the countries into a list using c(...):\ncustomers %\u0026gt;% filter(country %in% c(\u0026#39;France\u0026#39;,\u0026#39;USA\u0026#39;,\u0026#39;Australia\u0026#39;)) %\u0026gt;% select(customerName, country)\rThis returns our 53 customers in France, the USA or Australia.\r\r\rcustomerName\r\rcountry\r\r\r\r\r\rAtelier graphique\r\rFrance\r\r\r\rSignal Gift Stores\r\rUSA\r\r\r\rAustralian Collectors, Co. \rAustralia\r\r\r\rLa Rochelle Gifts\r\rFrance\r\r\r\rMini Gifts Distributors Ltd. \rUSA\r\r\r\rMini Wheels Co. \rUSA\r\r\r\rLand of Toys Inc. \rUSA\r\r\r\rSaveley \u0026amp; Henriot, Co. \rFrance\r\r\r\rMuscle Machine Inc\r\rUSA\r\r\r\rDiecast Classics Inc. \rUSA\r\r\r\rTechnics Stores Inc. \rUSA\r\r\r\rAmerican Souvenirs Inc\r\rUSA\r\r\r\rDaedalus Designs Imports\r\rFrance\r\r\r\rLa Corne D’abondance, Co. \rFrance\r\r\r\rCambridge Collectables Co. \rUSA\r\r\r\rGift Depot Inc. \rUSA\r\r\r\rVitachrome Inc. \rUSA\r\r\r\rAuto-Moto Classics Inc. \rUSA\r\r\r\rOnline Mini Collectables\r\rUSA\r\r\r\rToys4GrownUps.com\r\rUSA\r\r\r\rMini Caravy\r\rFrance\r\r\r\rBoards \u0026amp; Toys Co. \rUSA\r\r\r\rCollectable Mini Designs Co. \rUSA\r\r\r\rAlpha Cognac\r\rFrance\r\r\r\rLyon Souveniers\r\rFrance\r\r\r\rAuto Associés \u0026amp; Cie.\r\rFrance\r\r\r\rAnna’s Decorations, Ltd\r\rAustralia\r\r\r\rSouveniers And Things Co. \rAustralia\r\r\r\rMarta’s Replicas Co. \rUSA\r\r\r\rMini Classics\r\rUSA\r\r\r\rMini Creations Ltd. \rUSA\r\r\r\rCorporate Gift Ideas Co. \rUSA\r\r\r\rTekni Collectables Inc. \rUSA\r\r\r\rAustralian Gift Network, Co\r\rAustralia\r\r\r\rClassic Gift Ideas, Inc\r\rUSA\r\r\r\rMen ‘R’ US Retailers, Ltd. \rUSA\r\r\r\rMarseille Mini Autos\r\rFrance\r\r\r\rReims Collectables\r\rFrance\r\r\r\rGifts4AllAges.com\r\rUSA\r\r\r\rOnline Diecast Creations Co. \rUSA\r\r\r\rCollectables For Less Inc. \rUSA\r\r\r\rAuto Canal+ Petit\r\rFrance\r\r\r\rClassic Legends Inc. \rUSA\r\r\r\rGift Ideas Corp. \rUSA\r\r\r\rThe Sharp Gifts Warehouse\r\rUSA\r\r\r\rSuper Scale Inc. \rUSA\r\r\r\rMicroscale Inc. \rUSA\r\r\r\rFunGiftIdeas.com\r\rUSA\r\r\r\rAustralian Collectables, Ltd\r\rAustralia\r\r\r\rWest Coast Collectables Co. \rUSA\r\r\r\rMotor Mint Distributors Inc. \rUSA\r\r\r\rSignal Collectibles Ltd. \rUSA\r\r\r\rDiecast Collectables\r\rUSA\r\r\r\r\r\r\r(Top)\n\r\r3.7 The NOT IN operator\rIf we are interested in values are not in a list - for example, all customers who are not located in France, USA or Australia?\nWith SQL:\nIn SQL we can use the NOT IN operator:\nSELECT customerName, country\rFROM customers\rWHERE country NOT IN (\u0026#39;France\u0026#39;,\u0026#39;USA\u0026#39;, \u0026#39;Australia\u0026#39;)\rWith R:\nIn R, we negate the %in% operator by placing a ! at the start of the filter function, as follows:\ncustomers %\u0026gt;% filter(!country %in% c(\u0026#39;France\u0026#39;,\u0026#39;USA\u0026#39;,\u0026#39;Australia\u0026#39;)) %\u0026gt;% select(customerName, country)\rEach approach gives us 69 customers who are located in countries other than France, USA or Australia.\n(Top)\n\r\r3.8 Filtering with regular expressions\rYou can filter your results based on whether a column contains characters that follow a specified pattern. For example, you may want to find names that start with the letter ‘T’, or phone numbers that include the area code ‘214’.\nSQL offers a user-friendly way to do this using the LIKE operator, which is explained here. However, we are instead going to look at regular expressions, which are more flexible than SQL’s LIKE operator (though less user-friendly) and are consistent between SQL and R.\nTo use regular expressions in SQL we use the REGEXP operator, and in R we use the str_detect() (‘string detect’) function.\nTo see how this works, say we want to find all products with the word ‘Ford’ in them. We could use the following code:\nWith SQL:\nSELECT productName\rFROM products\rWHERE productName REGEXP \u0026#39;Ford\u0026#39;\rWith R:\nproducts %\u0026gt;% filter(str_detect(productName,\u0026#39;Ford\u0026#39;)) %\u0026gt;% select(productName)\rThese sets of code return a list of 15 models with that include the word ‘Ford’:\n\r\rproductName\r\r\r\r\r\r1968 Ford Mustang\r\r\r\r1969 Ford Falcon\r\r\r\r1940 Ford Pickup Truck\r\r\r\r1911 Ford Town Car\r\r\r\r1932 Model A Ford J-Coupe\r\r\r\r1926 Ford Fire Engine\r\r\r\r1913 Ford Model T Speedster\r\r\r\r1934 Ford V8 Coupe\r\r\r\r1903 Ford Model A\r\r\r\r1976 Ford Gran Torino\r\r\r\r1940s Ford truck\r\r\r\r1957 Ford Thunderbird\r\r\r\r1912 Ford Model T Delivery Wagon\r\r\r\r1940 Ford Delivery Sedan\r\r\r\r1928 Ford Phaeton Deluxe\r\r\r\r\r\r\rThe main difference in the code above is that SQL is not case sensitive but R is. You can specify case sensitivity as follows:\n\rTo make SQL case sensitive, replace REGEXP with REGEXP BINARY\rTo make R ignore cases, replace str_detect(productName,'Ford') in the example above with str_detect(productName, regex('ford', ignore_case=TRUE))\r\rThe beauty of SQL’s REGEXP and R’s str_detect() is that they will both work with many of the same regular expressions. You can modify both sets of code above to see the following:\n\rUse the ^ symbol to match the beginning of a string. For example, use '^America' to show products beginning with the words ‘America’ or ‘American’.\rUse $ to denote the end of a string. For example, use 'ter$' to return the names of all products that end in these three letters, such as ‘helicopter’ and ‘roadster’.\rUse '[...]' to match any of the strings listed within the brackets, which are separated with |. For example, use '^[A|B|C]' to match words beginning with either A, B, or C.\r\rWe won’t go into the details of regular expressions here, but a further explanation can be found at mysqltutorial.org.\n(Top)\r\rPart 2 of this post, to follow, will look at joins, using grouped data, and subqueries.\n\r\r","date":1573516800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573516800,"objectID":"38b4b97fae9c2637df992321b0062f05","permalink":"/post/r-and-sql-a/","publishdate":"2019-11-12T00:00:00Z","relpermalink":"/post/r-and-sql-a/","section":"post","summary":"When analyzing data, many common SQL queries can be carried out using R, and vice versa. This post uses examples to demonstrate similarities between the two.","tags":[],"title":"R and SQL (Part 1)","type":"post"},{"authors":[],"categories":[],"content":"\r\rThis book demonstrates the idea that most common statistical tests are special cases of simple linear models. It builds on a book written by Jonas Lindeløv, in which he presents the linear model as a ‘Swiss Army knife’ of statistical tests. The approach offers a simplified and intuitive way to teach statistical tests.\n\r\rThe book Common statistical tests are linear models (or: how to teach stats), by Jonas Lindeløv, beautifully demonstrates how many common statistical tests (such as the t-test, ANOVA and chi-squared) are special cases of a linear model.\nTo solidify my understanding, I wrote my own version of the book: Common statistical tests are linear models (a work through). I used this to work through the examples provided in the original, to expand on areas where there were gaps in my knowledge, and to explain some of the ideas using terms and concepts with which I was more familiar.\nThe main idea of the book is that most statistical tests can be explained as an application of the simple linear model, \\(y = a + b⋅x\\), which is familiar to most students of introductory statistics.\nFor example, say you wanted to assess whether the average salaries of men and women in a company were equal, based on a sample of 50 women and 50 men. A common test that might be applied in this case is the indendent sample t test. The null hypothesis would be that there was no difference between the average salaries of men and women.\nAn equivalent approach would be a linear model, of the form:\n\\[income = \\beta_0 + \\beta_1 \\cdot x_i\\]\nwhere \\(x_i\\) is a ‘dummy’ variable that takes the value of \\(0\\) if the person sampled is a woman and \\(1\\) if they are a man. In this case, \\(\\beta_1\\) would be the average difference in men’s salaries relative to women, as illustrated below.\n\r\rThe results of our independent sample t-test, i.e. whether there are statistically significant differences between men’s and women’s salaries, are exactly the same as our test for whether \\(\\beta_1\\) is different from zero! Both tests give the same p-value, which, if sufficiently low (typically below 5%) would lead us to reject the null hypothesis that there was no difference in salaries.\nThe book shows how the linear model can be applied in a wide range of other common tests. It also demonstrates that many non-parametric tests, which are needed when certain test assumptions do not hold, can be approximated by linear models using the rank of values.\nThis approach brings coherence to a wide range of statistical tests, which are usually taught to students as independent tools. It helps to explain the intuition underlying statistical tests (rather than relying on rote learning) by drawing on the familiar concept of linear regressions.\n","date":1565395200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565395200,"objectID":"14435039338ad28c115d517ae0878449","permalink":"/post/statistical-tests/","publishdate":"2019-08-10T00:00:00Z","relpermalink":"/post/statistical-tests/","section":"post","summary":"A book which demonstrates that most common statistical tests are special cases of linear models. This offers a simplified and intuitive way to understand statistical tests.","tags":[],"title":"Common statistical tests are linear models","type":"post"},{"authors":[""],"categories":null,"content":" Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":"\r\rIn this post I create a Tableau dashboard that compares how US cities raise and spend money, using data from the Fiscally Standardized Cities (FiSCs) database.\n\r\rI learned the basics of Tableau a few years ago, and have been impressed with its ability to produce interactive visualizations and share them online.\nOne feature I wanted to explore further was the ability for users to ‘drill down’ into the results presented in a dashboard. This avoids overwhelming the user with too much data up front, while still giving them the freedom to explore the data in more detail should they choose. It can also help the user to understand hierarchies present in the data, and how the various parts make up the whole. (Pivot tables can be used to similar effect in Microsoft Excel, but I wanted to apply this in a Tableau dashboard.)\nAs an example, I created a dashboard showing how major cities in the US raise and spend money. The animation below demonstrates the main features of the dashboard, the full version of which can be found here.\nDemonstration:\r\r\r Notice how the user is first presented with overall revenue / expenditure per resident, and can then drill down to see the results at a finer level of detail. The chart to the right shows the city’s ranking for whichever service the user clicks on. The map allows the user compare revenue or expenditure per head between neighboring cities.\nOverall I find Tableau to be great for producing interactive visualizations, and for performing exploratory data analysis using its click-and-point interface. But while the interface works great for standard visualizations, I’m often surprised at the need to use workarounds to achieve seemingly simple tasks (for example, in the dashboard above, creating a text box that returned the name of the service currently selected by the user). Tableau’s user-friendly interface lacks the conciseness and reproducibility of code, so a useful approach is to do as much work as possible in R first (e.g. cleaning and restructuring the data) and then using Tableau for the final visualization.\nTell me more about city spending!\nI produced this dashboard using the Fiscally Standardized Cities (FiSCs) database, which enables a meaningful comparison of the 150 largest cities in the US. It does so by adding the revenue and expenditure of each city government to the relevant portion of the revenue and expenditure of overlapping counties, independent school districts and special districts (e.g. airports and hospital districts). Without this standardization, comparisons across city governments alone can be misleading.\nThe dashboard highlights some interesting facts about Dallas, where I live, such as:\n\rSchools account for the largest share of local expenditure, though Dallas is not unusual in this respect.\rDallas spends a lot on airports on a per capita basis, presumably due to the Dallas-Fort Worth (DFW) airport. This also brings in revenue. However the questionable return on investment has led to some calls for the airport to be sold off.\n\rHospitals are the third largest category of expenditure. This presumably reflects Parkland Hospital, a safety net hospital that provides care for uninsured patients, funded through a property tax on Dallas county residents. This has raised questions of fairness given that the hospital is used by low-income residents from surrounding counties, which boast lower property taxes and provide the bare minimum state requirements for indigent health care.\rDallas spends a lot servicing its debt. Interest payments of $510 per resident are the 5th largest out of all the major cities, and is greater than its spending on police and fire services combined.\r\r","date":1552608000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552608000,"objectID":"07e9ff97fdc58acd93d188e40d43cbab","permalink":"/post/how-do-us-cities-raise-and-spend-money/","publishdate":"2019-03-15T00:00:00Z","relpermalink":"/post/how-do-us-cities-raise-and-spend-money/","section":"post","summary":"An interactive Tableau dashboard that compares how the largest US cities raise and spend money.","tags":[],"title":"Comparing city spending with Tableau","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Academic  Academic | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click  PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions?  Ask\n Documentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":[],"categories":[],"content":"\r\rIn this post I create a crime map of my local neighborhood, using live data accessed from the City of Dallas’ OpenData portal.\r\rShiny has been on my list of things to learn for quite a while now. With it you can make interactive web apps straight from R.\nWith this in mind, I built a simple app that accesses crime data from the City of Dallas and maps the locations in my neighborhood. The app can be found here. This accesses the latest data from the City of Dallas’ OpenData API which is updated daily.\nThe main features are illustrated below (and yep, there’s a Hollywood Santa Monica in Dallas!):\nAs can be seen, the app allows the user select the neighborhoods they’re interested in, and then displays incidents occurring in those neighborhoods over the selected time frame (from the past month to past three years).\nNote that to preserve the anonymity of my neighbors, I added some random ‘noise’ to the location data, so that the points displayed on the map would be within around 150 feet of the actual location.\nThe concept of Shiny is brilliant: it allows you to provide a user-friendly interface to your R code (like a dashboard) which can be accessed through a website. The user does not need to see any of the underlying code, and, because it is web-based, does not need to download anything. Your app can be hosted for free at Shinyapps.io (though the free version is subject to limitations on how long it can be accessed each month).\nTechnical stuff\nAll the code used to produce this app is available on Github. The main steps were as follows:\nAccess the data from City of Dallas API. The data was read using the jsonlite package, with help from the soql package to construct the URL needed to access the relevant ZIP codes.\n\rFilter the data to exclude incidents where there was not an actual offence, such as false alarms.\n\rCreate longitude and latitude columns. The downloaded data included a ‘geocoded coordinates’ column, but I couldn’t get this to play nicely with my map. I converted this to separate latitude and longitude columns, which worked fine.\rCreate shapefiles of my local neighbourhoods. I wanted to identify incidents that occurred in specific neighborhoods, as opposed to the wider ZIP codes. I could not find these boundary maps online (in the form of shapefiles), so I drew them manually in Google MyMaps. These boundaries could be downloaded as .kml files and converted to shapefiles here. The shapefiles were then read into R using the readOGR() function.\rOnly show those incidents occurring in relevant neighborhoods. The next step was to identify those incidents whose coordinates fell without the neighborhood boundaries described above. This was done using the over() function. The data was then filtered to only include those relevant incidents.\rRandomise locations. To preserve the anonymity of my neighbors, I changed street numbers to block numbers and added some random ‘noise’ to the coordinates of each incident.\rCreate the Shiny app. The app essentially plots all the incidents on a map using Leaflet. The incidents shown are filtered based on two sets of values entered by the user: the relevant neighborhood(s), and the time frame. The user is also able to click on the table to select an individual incident or incidents. This selection serves as another input, filtering the data to only include the selected incident(s) and overlying this second set of points on the map using red markers.\r\rThe final step was the hardest, given the learning curve associated with Shiny. However I was able to learn 90% of what I needed from this excellent DataCamp course, Building Web Applications in R with Shiny.\n","date":1547510400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547510400,"objectID":"fadfcc713e8bdbf3024dad829ea9e368","permalink":"/post/crime-map/","publishdate":"2019-01-15T00:00:00Z","relpermalink":"/post/crime-map/","section":"post","summary":"In this post I create a simple webapp that maps live crime data in my neighborhood.","tags":[],"title":"A neighborhood crime map using Shiny","type":"post"},{"authors":[],"categories":[],"content":"\r\rAs a new arrival in Dallas, it’s taken me a while to get to grips with its layout. Its sheer size and sprawl make it difficult to identify where Dallas ends and neighboring cities begin.\nWith this in mind, this post had two aims: to better understand the geography of Dallas, and to explore some of the GIS tools available in R, the open-source programming language. Specially, I wanted to produce a dot-density map showing the approximate location of each person in Dallas and its surrounding areas.\nThe DFW Metroplex\nA good starting point is the Dallas-Forth Worth (DFW) “Metroplex”. This is an area encompassing 13 counties, and is home to 7.4 million people. This is one of the fastest growing metropolitan areas in the United States.\nFig 1: The Dallas-Fort Worth Metroplex\n\rTo narrow things down, I focused on four counties which account for over 85% of residents in the Metroplex, namely Dallas County (2.6 million people), Tarrant (2.0 million), Collin (0.9 million), and Denton (0.8 million). The map below shows these key counties, overlaid by the boundaries of the City of Dallas.\nFig 2: City of Dallas and the four largest counties\n\rThe next step is break the four counties down by block group. Block groups are small geographical units used in the decennial census and the ongoing American Community Survey (ACS). For this analysis, I used population data from the 2012 - 2016 ACS.1\nFig 3: Block groups\n\rWhen producing a dot-density map, I wanted to allocate dots (representing people) to a random location within each block group. One problem is that these boundaries overlay bodies of water such as lakes, which are obviously uninhabited.\nI addressed this by ‘erasing’ the area of each block group that overlaps a major body of water. To do this I used the technique explained here by Kyle Walker, the author of the tidycensus package for R. The map below shows the same block group boundaries once the areas of water have been erased.\nFig 4: Block groups adjusted for large bodies of water\n\rWe are now ready to produce a dot-density map. Here I used one dot to represent 100 residents, and assigned each dot to a random location somewhere in each block group. The results are shown below.\nFig 5: Dot density map of Dallas, 2016 (1 dot = 100 people)\n\rThe map illustrates Dallas’ sprawling population, and the absence of a clear delineation between neighboring cities and towns (such as Dallas, Forth Worth, Denton and McKinney). There are few blank areas on the map that would indicate rural or unoccupied land separating the cities. Any uninhabited spots tend to be rivers and airports, often with abutting commercial and industrial zones. This includes the branches of the Trinity River and the DFW airport.\nPopulation growth over time\nThe final step was to produce a map showing how the population has changed over time. Here I used dots to represent growth or reductions in the number of people.\nThe map below shows the change in population between 2000 and 2016.2 Each blue dot represents an increase of 50 people, and each red dot represents a reduction of 50 people.\nFig 6: Population growth between 2000 and 2016 (1 dot = 50 people)\n\rThis map shows a general decline in population levels near the centers of Dallas and Fort Worth. There is, however, a dense cluster of growth near downtown Dallas. Most of the growth is concentrated in the outlying towns and cities, notably Frisco and McKinney to the north, which in 2016 were the second- and third-fastest growing large cities in the United States.\nThese observations are consistent with the phenomenon of ‘growth rings’ seen across the US, illustrated in a set of impressive vizualizations produced by Stephen Von Worley, described as follows:\n\rNationwide, one feature stands out: the bumper crop of fresh suburbs that ring almost every metropolitan area. Where did all of these people come from?… The new tract developments appear to be sucking the life out the older neighborhoods, which bear the scarlet tints of waning population. Ah, the classic flight to the suburbs, but with a twist!… [A]t the very center of the biggest cities – within a stone’s throw of downtown – you’ll see a tiny, resurgent dot of blue. Apparently, at some point in recent history, a home address amongst the skyscrapers became desirable again.\n\rAnd that’s it! Two dot-density maps showing the distribution of Dallas’ population and its change over time. This illustrates R’s GIS capabilities, and the ability to work with spatial features (such as maps and boundary files) alongside regular data sets. As always, the code used to produced this post is available on GitHub.\n\rThe ACS is carried out on a rolling five year basis, and gathers information previously contained in the long form of the decennial census. Figures in the ACS are based on a sample, and so are subject to sampling error.↩︎\n\rTechnically, this is between 2000 and 2012 - 2016, as the latter is based on the ASC which spans a five year period. Because the boundaries of block groups have changed over time, it was necessary to use population estimates for 2000 which had been standardized to the more recent 2010 geography. This information is published by the National Historical Geographic Information System (NHGIS).↩︎\n\r\r\r","date":1526688000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1526688000,"objectID":"6a9e6d82a4d86249988ea61514f8f6ce","permalink":"/post/dallas-population/","publishdate":"2018-05-19T00:00:00Z","relpermalink":"/post/dallas-population/","section":"post","summary":"Exploring the population distribution in and around Dallas using GIS tools.","tags":[],"title":"A dot-density map of Dallas","type":"post"},{"authors":[],"categories":[],"content":"\r\rThe most deprived parts of England have borne the brunt of public spending cuts since 2010. As spending now begins to increase, this could bring relief to some of the hardest-hit local councils. However, this analysis shows that the gains - unlike the cuts - will be shared fairly evenly among both affluent and deprived parts of England.\n\rIn 2010 the UK government embarked on a series of major spending cuts to reduce its budget deficit, in response to the financial crisis. The department responsible for local government - now the Ministry of Housing, Communities and Local Government (MHCLG) - was forced to make some of the greatest savings.\nThis translated to cuts in funding for local councils across England. Local councils who were most reliant on central government grants - as opposed to locally raised revenue - were hit the hardest by these cuts. These also tended to be the most deprived parts of England.\nTo illustrate this, we looked at the relationship between local councils’ deprivation and change in ‘spending power’ between 2010 and 2019. This is illustrated in the chart below, broken down by type of authority.1 Please note that this chart excludes the effects of inflation; in real terms, councils’ funding has fallen even more sharply over time.\nFig 1: Deprivation and change in spending power since 2010\r\nSpending power reflects the major revenue streams available to local councils. It is made up of two components:\n\rCouncil tax revenue, a tax paid by residents based on the value of their homes; and\rNeed-based funding determined by central government, including (i) direct grants and (ii) a share of business rates, a levy paid by local businesses based on the market rental value of their premises.2\r\rDeprivation reflects the percentage of residents who are income deprived, based on benefit recipient rates. This is based on the English Indices of Deprivation 2015.\nDeprived authorities fared worse because of the government’s decision to apply uniform cuts to need-based funding. Poorer parts of England are more reliant on this funding and have a lower capacity to generate council tax revenue than affluent areas. (These points have also been made in a recent blog post by Dan Bates, which focuses on differences in council tax revenue). The table below compares the fortunes of Wokingham, the least deprived unitary in England with a high share of council tax revenue, with those of Knowsley, the most deprived authority and with a low share of this tax revenue.\r\rTable 1: Wokingham versus Knowsley\n\r\r\r\rLocal authority\r% of revenue from council tax (2010)\r% deprived residents\rSpending power change\r\r\r\rWokingham\r68%\r5%\r+1.8%\r\rKnowsley\r24%\r28%\r-26.9%\r\r\r\r\rIn 2016, the government began taking these differences in council tax revenue into account when applying cuts. However, 2016 was also the final year in which spending power was cut (at least for unitaries and counties), and so this change came too late to prevent deprived areas from bearing a disproportionate share of cuts.\nFurthermore, changes in subsequent years did little to reverse the cuts to deprived areas. This can be seen by breaking the time period into years in which spending power was falling (2010 to 2016) and when it is rising (2017 to 2019). This is illustrated in the chart below, focusing on those authorities with social care responsibilities.3\nFig 2: Change in spending power for periods 2010-2016 and 2017-2019\nThis clearly shows that while spending power cuts fell disproportionately on the most deprived councils in England, spending power gains (at least for social care providers) are set to be distributed fairly evenly among both affluent and deprived areas.\rThe UK government is currently carrying out review of how local councils are funded, with changes to be implemented in 2020. It is yet to be seen if this will result in a shift of resources back the most vulnerable parts of England, or whether a diminished share of funding for deprived areas has simply become the new normal.\r Technical stuff\n\rSpending power\nThis analysis was based on spending power figures published by MHCLG since 2011-12. For each year, the adjusted change in spending power was used. This provides a like-for-like comparison with the year before, controlling for changes in the definition of spending power. Unlike MHCLG’s definition of spending power, this analysis excluded Public Health grant (but includes NHS support for social care). This was ring-fenced funding which could not be used to fund local authorities’ core services. The annual adjusted changes in each council’s spending power were then linked together, to give an estimate of the compounded change in spending power over time. All these figures are are presented in nominal terms, and exclude the effects of inflation.\r\rCode\nThe charts in this post were produced using the plotly package for R. This allows you produce charts in R as you normally would (using ggplot2), but then publish them using Plotly. Using Plotly means you can produce animated charts (as in Figure 1), and make the charts interactive with tool tips. The code and data underlying this post can be found on GitHub.\r   \rIn simple terms, in any given area, local services are provided by either (i) a single ‘unitary’ authority or (ii) by both a county council and shire district. Among other functions, unitaries and county councils are responsible for providing social services to children and adults. (For simplicity we use the term ‘unitaries’ in this post, though this includes unitaries, metropolitan districts and London boroughs).↩︎\n\rMHCLG deducts a ‘tariff’ from or applies a ‘top-up’ to each local council, so that their final share of business rate revenue is equal to a pre-determined level of funding need. This level of funding is included in MHCLG’s definition of ‘spending power’. Additionally, local councils are rewarded (or penalised) for growth (or reductions) in the physical tax base. These changes in revenue are excluded from the definition.↩︎\n\rIn 2017 to 2019, spending power rises for unitaries and counties. This is partly financed by further cuts to shire districts. For shire districts, there is no immediately discernible relationship between spending power cuts and deprivation in 2017 to 2019.↩︎\n\r\r\r","date":1522800000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1522800000,"objectID":"a3a98eb46549e7483801948222c19dc0","permalink":"/post/deprivation-funding-cuts/","publishdate":"2018-04-04T00:00:00Z","relpermalink":"/post/deprivation-funding-cuts/","section":"post","summary":"Using animated to demonstrate how the most deprived parts of England have borne the brunt of public spending cuts since 2010.","tags":[],"title":"Deprivation and funding cuts in England","type":"post"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":["","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"}]